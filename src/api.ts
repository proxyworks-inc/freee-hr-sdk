/* tslint:disable */
/* eslint-disable */
/**
 * freee人事労務 API
 * freee人事労務のAPI仕様です。  ## [重要] freee人事労務 APIの新バージョンについて  このリファレンスはfreee人事労務 APIの新バージョンのリファレンスです。  2022年7月まで[旧バージョン](https://developer.freee.co.jp/docs/hr/pre-reference)と合わせて2つのバージョンが利用できる状態です。  新しいAPIを利用するにはリクエストヘッダーに以下を指定します。  ``` FREEE-VERSION: 2022-02-01 ```  指定がない場合には2022年7月に廃止予定のAPIを利用することになります。  詳細な変更やスケジュールは[【重要】freee人事労務APIの仕様変更について](https://developer.freee.co.jp/news/5418)をご覧ください。  ## 認証について  OAuth2.0を利用します。詳細は[ドキュメントの認証](https://developer.freee.co.jp/docs)パートを参照してください。  ## エンドポイント  https://api.freee.co.jp/hr  ## 後方互換性ありの変更  freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。  - 新しいAPIリソース・エンドポイントの追加 - 既存のAPIに対して必須ではない新しいリクエストパラメータの追加 - 既存のAPIレスポンスに対する新しいプロパティの追加 - 既存のAPIレスポンスに対するプロパティの順番の入れ変え - keyとなっているidやcodeの長さの変更（長くする）  ## エラーレスポンス  APIリクエストでエラーが発生した場合は、エラー原因に応じたステータスコードおよびメッセージを返します。  |ステータスコード|原因| |---|---| |400|リクエストパラメータが不正| |401|アクセストークンが無効| |403|アクセス権限がない| |404|リソースが存在しない| |429|リクエスト回数制限を越えた| |503|システム内で予期しないエラーが発生|  メッセージボディ内の `messages` にはエラー内容を説明する文字列が入ります。  ``` {     \"status_code\": 400,     \"errors\": [         {             \"type\": \"bad_request\",             \"messages\": [                 \"リクエストの形式が不正です。\"             ]         }     ] } ```  ## API使用制限  APIリクエストは1時間で5000回を上限としています。API使用ステータスはレスポンスヘッダに付与されます。  ``` X-Ratelimit-Limit:5000 X-Ratelimit-Remaining:4998 X-Ratelimit-Reset:2018-01-01T12:00:00.000000Z ```  各ヘッダの意味は次のとおりです。  |ヘッダ名|説明| |---|---| |X-Ratelimit-Limit|使用回数の上限| |X-Ratelimit-Remaining|残り使用回数| |X-Ratelimit-Reset|使用回数がリセットされる時刻|  上記に加え、freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。 その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。  
 *
 * The version of the OpenAPI document: v2022-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessDeniedError
 */
export interface AccessDeniedError {
    /**
     * 
     * @type {string}
     * @memberof AccessDeniedError
     */
    'error'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessDeniedError
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessDeniedError
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1BonusesEmployeePayrollStatementSerializer
 */
export interface ApiV1BonusesEmployeePayrollStatementSerializer {
    /**
     * 賞与明細ID
     * @type {number}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'id'?: number;
    /**
     * 事業所ID
     * @type {number}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'company_id'?: number;
    /**
     * 従業員ID
     * @type {number}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'employee_id'?: number;
    /**
     * 従業員の姓名
     * @type {string}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'employee_name'?: string;
    /**
     * 従業員の表示名
     * @type {string}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'employee_display_name'?: string;
    /**
     * 従業員番号
     * @type {string}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'employee_num'?: string | null;
    /**
     * 確定日
     * @type {string}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'closing_date'?: string;
    /**
     * 支払日
     * @type {string}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'pay_date'?: string;
    /**
     * 賞与明細が確定されているかどうか
     * @type {boolean}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'fixed'?: boolean;
    /**
     * 計算状況ステータス calculating: 計算中, calculated: 計算完了, error: エラー
     * @type {string}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'calc_status'?: string;
    /**
     * 計算状況ステータスの更新日
     * @type {string}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'calculated_at'?: string | null;
    /**
     * 賞与額
     * @type {string}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'bonus_amount'?: string | null;
    /**
     * 手当額合計
     * @type {string}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'total_allowance_amount'?: string | null;
    /**
     * 控除額合計
     * @type {string}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'total_deduction_amount'?: string | null;
    /**
     * 差引支給額(手取り額)
     * @type {string}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'net_payment_amount'?: string | null;
    /**
     * 総支給額(額面)
     * @type {string}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'gross_payment_amount'?: string | null;
    /**
     * 課税対象支給額
     * @type {string}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'total_taxable_payment_amount'?: string | null;
    /**
     * 手当
     * @type {Array<ApiV1EmployeePayrollStatementsEmployeePayrollStatementItemSerializer>}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'allowances'?: Array<ApiV1EmployeePayrollStatementsEmployeePayrollStatementItemSerializer>;
    /**
     * 控除項目（所得税、社会保険料等）
     * @type {Array<ApiV1EmployeePayrollStatementsEmployeePayrollStatementItemSerializer>}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'deductions'?: Array<ApiV1EmployeePayrollStatementsEmployeePayrollStatementItemSerializer>;
    /**
     * 備考
     * @type {string}
     * @memberof ApiV1BonusesEmployeePayrollStatementSerializer
     */
    'remark'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1BonusesEmployeePayrollStatementsControllerShowResponse
 */
export interface ApiV1BonusesEmployeePayrollStatementsControllerShowResponse {
    /**
     * 
     * @type {ApiV1BonusesEmployeePayrollStatementSerializer}
     * @memberof ApiV1BonusesEmployeePayrollStatementsControllerShowResponse
     */
    'employee_payroll_statement'?: ApiV1BonusesEmployeePayrollStatementSerializer;
}
/**
 * 
 * @export
 * @interface ApiV1BonusesEmployeePayrollStatementsIndexSerializer
 */
export interface ApiV1BonusesEmployeePayrollStatementsIndexSerializer {
    /**
     * 
     * @type {Array<ApiV1BonusesEmployeePayrollStatementSerializer>}
     * @memberof ApiV1BonusesEmployeePayrollStatementsIndexSerializer
     */
    'employee_payroll_statements'?: Array<ApiV1BonusesEmployeePayrollStatementSerializer>;
    /**
     * 
     * @type {number}
     * @memberof ApiV1BonusesEmployeePayrollStatementsIndexSerializer
     */
    'total_count'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1CompaniesEmployeeSerializer
 */
export interface ApiV1CompaniesEmployeeSerializer {
    /**
     * 従業員ID
     * @type {number}
     * @memberof ApiV1CompaniesEmployeeSerializer
     */
    'id'?: number;
    /**
     * 従業員番号(従業員詳細未設定の場合、nullになります。)
     * @type {string}
     * @memberof ApiV1CompaniesEmployeeSerializer
     */
    'num'?: string | null;
    /**
     * 従業員名（表示名）
     * @type {string}
     * @memberof ApiV1CompaniesEmployeeSerializer
     */
    'display_name'?: string;
    /**
     * 入社日
     * @type {string}
     * @memberof ApiV1CompaniesEmployeeSerializer
     */
    'entry_date'?: string;
    /**
     * 退職日
     * @type {string}
     * @memberof ApiV1CompaniesEmployeeSerializer
     */
    'retire_date'?: string | null;
    /**
     * ユーザーID(従業員詳細未設定の場合、nullになります。)
     * @type {number}
     * @memberof ApiV1CompaniesEmployeeSerializer
     */
    'user_id'?: number | null;
    /**
     * ログイン用メールアドレス(従業員詳細未設定の場合、nullになります。)
     * @type {string}
     * @memberof ApiV1CompaniesEmployeeSerializer
     */
    'email'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeeCreateRequestSerializer
 */
export interface ApiV1EmployeeCreateRequestSerializer {
    /**
     * 従業員番号<br> 従業員を判別しやすいよう管理することができます。（例: 1人目の正社員を A-001 と入力）
     * @type {string}
     * @memberof ApiV1EmployeeCreateRequestSerializer
     */
    'num'?: string;
    /**
     * <a href=\"https://support.freee.co.jp/hc/ja/articles/360000562403-労働時間制度と勤務-賃金設定について\" target=\"_blank\">勤務・賃金設定名</a> で設定した名称を指定してください。 - 未指定の際は、最初に登録したデータが利用されます。
     * @type {string}
     * @memberof ApiV1EmployeeCreateRequestSerializer
     */
    'working_hours_system_name'?: string;
    /**
     * <a href=\"https://support.freee.co.jp/hc/ja/articles/360000666303-締め日支払い日を変更する方法は-\" target=\"_blank\">締め日支払い日グループ名</a> で設定した締め日支払い日を指定してください。 - 未指定の際は、最初に登録したデータが利用されます。
     * @type {string}
     * @memberof ApiV1EmployeeCreateRequestSerializer
     */
    'company_reference_date_rule_name'?: string;
    /**
     * 姓（必須）
     * @type {string}
     * @memberof ApiV1EmployeeCreateRequestSerializer
     */
    'last_name': string;
    /**
     * 名（必須）
     * @type {string}
     * @memberof ApiV1EmployeeCreateRequestSerializer
     */
    'first_name': string;
    /**
     * 姓カナ（必須）
     * @type {string}
     * @memberof ApiV1EmployeeCreateRequestSerializer
     */
    'last_name_kana': string;
    /**
     * 名カナ（必須）
     * @type {string}
     * @memberof ApiV1EmployeeCreateRequestSerializer
     */
    'first_name_kana': string;
    /**
     * 生年月日（必須）
     * @type {string}
     * @memberof ApiV1EmployeeCreateRequestSerializer
     */
    'birth_date': string;
    /**
     * 入社日（必須）
     * @type {string}
     * @memberof ApiV1EmployeeCreateRequestSerializer
     */
    'entry_date': string;
    /**
     * 給与方式（必須） monthly: 月給, daily: 日給, hourly: 時給 - フレックスタイム制を使用している場合はmonthly以外指定できません。
     * @type {string}
     * @memberof ApiV1EmployeeCreateRequestSerializer
     */
    'pay_calc_type': ApiV1EmployeeCreateRequestSerializerPayCalcTypeEnum;
    /**
     * 基本給（必須）
     * @type {number}
     * @memberof ApiV1EmployeeCreateRequestSerializer
     */
    'pay_amount': number;
    /**
     * 性別　unselected: 未選択, male: 男性, female: 女性（デフォルト: unselected: 未選択）
     * @type {string}
     * @memberof ApiV1EmployeeCreateRequestSerializer
     */
    'gender'?: ApiV1EmployeeCreateRequestSerializerGenderEnum;
    /**
     * 配偶者の有無（デフォルト: false）
     * @type {boolean}
     * @memberof ApiV1EmployeeCreateRequestSerializer
     */
    'married'?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeeCreateRequestSerializerPayCalcTypeEnum {
    Monthly = 'monthly',
    Daily = 'daily',
    Hourly = 'hourly'
}
/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeeCreateRequestSerializerGenderEnum {
    Unselected = 'unselected',
    Male = 'male',
    Female = 'female'
}

/**
 * 
 * @export
 * @interface ApiV1EmployeeGroupMembershipSerializer
 */
export interface ApiV1EmployeeGroupMembershipSerializer {
    /**
     * 従業員ID
     * @type {number}
     * @memberof ApiV1EmployeeGroupMembershipSerializer
     */
    'id'?: number;
    /**
     * 従業員番号
     * @type {string}
     * @memberof ApiV1EmployeeGroupMembershipSerializer
     */
    'num'?: string | null;
    /**
     * 従業員名（表示名）
     * @type {string}
     * @memberof ApiV1EmployeeGroupMembershipSerializer
     */
    'display_name'?: string;
    /**
     * 入社日
     * @type {string}
     * @memberof ApiV1EmployeeGroupMembershipSerializer
     */
    'entry_date'?: string;
    /**
     * 退職日
     * @type {string}
     * @memberof ApiV1EmployeeGroupMembershipSerializer
     */
    'retire_date'?: string | null;
    /**
     * ユーザーID(従業員詳細未設定の場合、nullになります。)
     * @type {number}
     * @memberof ApiV1EmployeeGroupMembershipSerializer
     */
    'user_id'?: number | null;
    /**
     * ログイン用メールアドレス(従業員詳細未設定の場合、nullになります。)
     * @type {string}
     * @memberof ApiV1EmployeeGroupMembershipSerializer
     */
    'login_email'?: string | null;
    /**
     * 生年月日
     * @type {string}
     * @memberof ApiV1EmployeeGroupMembershipSerializer
     */
    'birth_date'?: string;
    /**
     * 性別　unselected: 未選択, male: 男性, female: 女性
     * @type {string}
     * @memberof ApiV1EmployeeGroupMembershipSerializer
     */
    'gender'?: ApiV1EmployeeGroupMembershipSerializerGenderEnum;
    /**
     * 給与計算対象従業員の場合trueを返します
     * @type {boolean}
     * @memberof ApiV1EmployeeGroupMembershipSerializer
     */
    'payroll_calculation'?: boolean;
    /**
     * 
     * @type {Array<ApiV1GroupMembershipSerializer>}
     * @memberof ApiV1EmployeeGroupMembershipSerializer
     */
    'group_memberships'?: Array<ApiV1GroupMembershipSerializer>;
}

/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeeGroupMembershipSerializerGenderEnum {
    Unselected = 'unselected',
    Male = 'male',
    Female = 'female'
}

/**
 * 
 * @export
 * @interface ApiV1EmployeeGroupMembershipsIndexSerializer
 */
export interface ApiV1EmployeeGroupMembershipsIndexSerializer {
    /**
     * 
     * @type {Array<ApiV1EmployeeGroupMembershipSerializer>}
     * @memberof ApiV1EmployeeGroupMembershipsIndexSerializer
     */
    'employee_group_memberships'?: Array<ApiV1EmployeeGroupMembershipSerializer>;
    /**
     * 
     * @type {number}
     * @memberof ApiV1EmployeeGroupMembershipsIndexSerializer
     */
    'total_count'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeePayrollStatementsEmployeeAttendanceItemSerializer
 */
export interface ApiV1EmployeePayrollStatementsEmployeeAttendanceItemSerializer {
    /**
     * 項目名
     * @type {string}
     * @memberof ApiV1EmployeePayrollStatementsEmployeeAttendanceItemSerializer
     */
    'name'?: string;
    /**
     * 時間
     * @type {string}
     * @memberof ApiV1EmployeePayrollStatementsEmployeeAttendanceItemSerializer
     */
    'time'?: string;
    /**
     * 控除額
     * @type {string}
     * @memberof ApiV1EmployeePayrollStatementsEmployeeAttendanceItemSerializer
     */
    'amount'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeePayrollStatementsEmployeeOvertimePayItemSerializer
 */
export interface ApiV1EmployeePayrollStatementsEmployeeOvertimePayItemSerializer {
    /**
     * 項目名
     * @type {string}
     * @memberof ApiV1EmployeePayrollStatementsEmployeeOvertimePayItemSerializer
     */
    'name'?: string;
    /**
     * 時間(単位: 分)。固定残業代の場合、nullになります。
     * @type {string}
     * @memberof ApiV1EmployeePayrollStatementsEmployeeOvertimePayItemSerializer
     */
    'time'?: string | null;
    /**
     * 手当金額
     * @type {string}
     * @memberof ApiV1EmployeePayrollStatementsEmployeeOvertimePayItemSerializer
     */
    'amount'?: string;
    /**
     * コード（事業所毎に設定可能な小文字英数最大10桁のコード）
     * @type {string}
     * @memberof ApiV1EmployeePayrollStatementsEmployeeOvertimePayItemSerializer
     */
    'code'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeePayrollStatementsEmployeePayrollStatementItemSerializer
 */
export interface ApiV1EmployeePayrollStatementsEmployeePayrollStatementItemSerializer {
    /**
     * 項目名
     * @type {string}
     * @memberof ApiV1EmployeePayrollStatementsEmployeePayrollStatementItemSerializer
     */
    'name'?: string;
    /**
     * 金額
     * @type {string}
     * @memberof ApiV1EmployeePayrollStatementsEmployeePayrollStatementItemSerializer
     */
    'amount'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeeSerializer
 */
export interface ApiV1EmployeeSerializer {
    /**
     * 従業員ID
     * @type {number}
     * @memberof ApiV1EmployeeSerializer
     */
    'id'?: number;
    /**
     * 事業所ID
     * @type {number}
     * @memberof ApiV1EmployeeSerializer
     */
    'company_id'?: number;
    /**
     * 従業員番号
     * @type {string}
     * @memberof ApiV1EmployeeSerializer
     */
    'num'?: string | null;
    /**
     * 従業員名（表示名）
     * @type {string}
     * @memberof ApiV1EmployeeSerializer
     */
    'display_name'?: string;
    /**
     * 基礎年金番号
     * @type {string}
     * @memberof ApiV1EmployeeSerializer
     */
    'base_pension_num'?: string | null;
    /**
     * 被保険者番号（雇用保険）
     * @type {string}
     * @memberof ApiV1EmployeeSerializer
     */
    'employment_insurance_reference_number'?: string;
    /**
     * 生年月日
     * @type {string}
     * @memberof ApiV1EmployeeSerializer
     */
    'birth_date'?: string;
    /**
     * 入社日
     * @type {string}
     * @memberof ApiV1EmployeeSerializer
     */
    'entry_date'?: string;
    /**
     * 退職日
     * @type {string}
     * @memberof ApiV1EmployeeSerializer
     */
    'retire_date'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1EmployeeSerializer
     */
    'user_id'?: number | null;
    /**
     * 
     * @type {ApiV1EmployeesProfileRuleSerializer}
     * @memberof ApiV1EmployeeSerializer
     */
    'profile_rule'?: ApiV1EmployeesProfileRuleSerializer | null;
    /**
     * 
     * @type {ApiV1EmployeesHealthInsuranceRuleSerializer}
     * @memberof ApiV1EmployeeSerializer
     */
    'health_insurance_rule'?: ApiV1EmployeesHealthInsuranceRuleSerializer | null;
    /**
     * 
     * @type {ApiV1EmployeesWelfarePensionInsuranceRuleSerializer}
     * @memberof ApiV1EmployeeSerializer
     */
    'welfare_pension_insurance_rule'?: ApiV1EmployeesWelfarePensionInsuranceRuleSerializer | null;
    /**
     * 扶養親族
     * @type {Array<ApiV1EmployeesDependentRuleSerializer>}
     * @memberof ApiV1EmployeeSerializer
     */
    'dependent_rules'?: Array<ApiV1EmployeesDependentRuleSerializer>;
    /**
     * 
     * @type {ApiV1EmployeesBankAccountRuleSerializer}
     * @memberof ApiV1EmployeeSerializer
     */
    'bank_account_rule'?: ApiV1EmployeesBankAccountRuleSerializer | null;
    /**
     * 
     * @type {ApiV1EmployeesBasicPayRuleSerializer}
     * @memberof ApiV1EmployeeSerializer
     */
    'basic_pay_rule'?: ApiV1EmployeesBasicPayRuleSerializer | null;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeeUpdateRequestSerializer
 */
export interface ApiV1EmployeeUpdateRequestSerializer {
    /**
     * 従業員番号<br> 従業員を判別しやすいよう管理することができます。（例: 1人目の正社員を A-001 と入力）
     * @type {string}
     * @memberof ApiV1EmployeeUpdateRequestSerializer
     */
    'num'?: string;
    /**
     * 従業員名（freee人事労務上での表示にのみ使用される名前です。出力書類には姓名が使用されます。）
     * @type {string}
     * @memberof ApiV1EmployeeUpdateRequestSerializer
     */
    'display_name'?: string;
    /**
     * 基礎年金番号 数値文字列10桁固定長 例: 1111111111
     * @type {string}
     * @memberof ApiV1EmployeeUpdateRequestSerializer
     */
    'base_pension_num'?: string;
    /**
     * 被保険者番号（雇用保険） 数値文字列11桁固定長 例: 11111111111
     * @type {string}
     * @memberof ApiV1EmployeeUpdateRequestSerializer
     */
    'employment_insurance_reference_number'?: string;
    /**
     * 生年月日 null不可
     * @type {string}
     * @memberof ApiV1EmployeeUpdateRequestSerializer
     */
    'birth_date': string;
    /**
     * 入社日 null不可
     * @type {string}
     * @memberof ApiV1EmployeeUpdateRequestSerializer
     */
    'entry_date': string;
    /**
     * 退職日 - 退職していない場合は指定不要です。 - 指定する場合はentry_date以降の日付を指定してください。 - retire_dateをクリアする場合、nullを指定してください。
     * @type {string}
     * @memberof ApiV1EmployeeUpdateRequestSerializer
     */
    'retire_date'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesBankAccountRuleSerializer
 */
export interface ApiV1EmployeesBankAccountRuleSerializer {
    /**
     * 銀行口座ルールID
     * @type {number}
     * @memberof ApiV1EmployeesBankAccountRuleSerializer
     */
    'id'?: number;
    /**
     * 事業所ID
     * @type {number}
     * @memberof ApiV1EmployeesBankAccountRuleSerializer
     */
    'company_id'?: number;
    /**
     * 従業員ID
     * @type {number}
     * @memberof ApiV1EmployeesBankAccountRuleSerializer
     */
    'employee_id'?: number;
    /**
     * 金融機関名
     * @type {string}
     * @memberof ApiV1EmployeesBankAccountRuleSerializer
     */
    'bank_name'?: string | null;
    /**
     * 金融機関名カナ
     * @type {string}
     * @memberof ApiV1EmployeesBankAccountRuleSerializer
     */
    'bank_name_kana'?: string | null;
    /**
     * 金融機関コード
     * @type {string}
     * @memberof ApiV1EmployeesBankAccountRuleSerializer
     */
    'bank_code'?: string | null;
    /**
     * 支店名
     * @type {string}
     * @memberof ApiV1EmployeesBankAccountRuleSerializer
     */
    'branch_name'?: string | null;
    /**
     * 支店名カナ
     * @type {string}
     * @memberof ApiV1EmployeesBankAccountRuleSerializer
     */
    'branch_name_kana'?: string | null;
    /**
     * 支店コード
     * @type {string}
     * @memberof ApiV1EmployeesBankAccountRuleSerializer
     */
    'branch_code'?: string | null;
    /**
     * 口座番号
     * @type {string}
     * @memberof ApiV1EmployeesBankAccountRuleSerializer
     */
    'account_number'?: string | null;
    /**
     * 口座名義カナ
     * @type {string}
     * @memberof ApiV1EmployeesBankAccountRuleSerializer
     */
    'account_name'?: string | null;
    /**
     * 預金種類 ordinary: 普通預金, current: 当座預金, saving: 貯蓄預金
     * @type {string}
     * @memberof ApiV1EmployeesBankAccountRuleSerializer
     */
    'account_type'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesBankAccountRuleUpdateRequestSerializer
 */
export interface ApiV1EmployeesBankAccountRuleUpdateRequestSerializer {
    /**
     * 金融機関名
     * @type {string}
     * @memberof ApiV1EmployeesBankAccountRuleUpdateRequestSerializer
     */
    'bank_name'?: string;
    /**
     * 金融機関名カナ 英字カナのみ
     * @type {string}
     * @memberof ApiV1EmployeesBankAccountRuleUpdateRequestSerializer
     */
    'bank_name_kana'?: string;
    /**
     * 金融機関コード 数値文字列4桁
     * @type {string}
     * @memberof ApiV1EmployeesBankAccountRuleUpdateRequestSerializer
     */
    'bank_code'?: string;
    /**
     * 支店名
     * @type {string}
     * @memberof ApiV1EmployeesBankAccountRuleUpdateRequestSerializer
     */
    'branch_name'?: string;
    /**
     * 支店名カナ　英字カナのみ
     * @type {string}
     * @memberof ApiV1EmployeesBankAccountRuleUpdateRequestSerializer
     */
    'branch_name_kana'?: string;
    /**
     * 支店コード 数値文字列3桁
     * @type {string}
     * @memberof ApiV1EmployeesBankAccountRuleUpdateRequestSerializer
     */
    'branch_code'?: string;
    /**
     * 口座番号 数値文字列7桁
     * @type {string}
     * @memberof ApiV1EmployeesBankAccountRuleUpdateRequestSerializer
     */
    'account_number'?: string;
    /**
     * 口座名義カナ　英字カナのみ
     * @type {string}
     * @memberof ApiV1EmployeesBankAccountRuleUpdateRequestSerializer
     */
    'account_name'?: string;
    /**
     * 預金種類 ordinary: 普通預金, current: 当座預金, saving: 貯蓄預金
     * @type {string}
     * @memberof ApiV1EmployeesBankAccountRuleUpdateRequestSerializer
     */
    'account_type'?: ApiV1EmployeesBankAccountRuleUpdateRequestSerializerAccountTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesBankAccountRuleUpdateRequestSerializerAccountTypeEnum {
    Ordinary = 'ordinary',
    Current = 'current',
    Saving = 'saving'
}

/**
 * 
 * @export
 * @interface ApiV1EmployeesBankAccountRulesControllerShowResponse
 */
export interface ApiV1EmployeesBankAccountRulesControllerShowResponse {
    /**
     * 
     * @type {ApiV1EmployeesBankAccountRuleSerializer}
     * @memberof ApiV1EmployeesBankAccountRulesControllerShowResponse
     */
    'employee_bank_account_rule'?: ApiV1EmployeesBankAccountRuleSerializer | null;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesBankAccountRulesControllerUpdateBody
 */
export interface ApiV1EmployeesBankAccountRulesControllerUpdateBody {
    /**
     * 更新対象事業所ID（必須）
     * @type {number}
     * @memberof ApiV1EmployeesBankAccountRulesControllerUpdateBody
     */
    'company_id': number;
    /**
     * 更新対象年（必須）
     * @type {number}
     * @memberof ApiV1EmployeesBankAccountRulesControllerUpdateBody
     */
    'year': number;
    /**
     * 更新対象月（必須）
     * @type {number}
     * @memberof ApiV1EmployeesBankAccountRulesControllerUpdateBody
     */
    'month': number;
    /**
     * 
     * @type {ApiV1EmployeesBankAccountRuleUpdateRequestSerializer}
     * @memberof ApiV1EmployeesBankAccountRulesControllerUpdateBody
     */
    'employee_bank_account_rule': ApiV1EmployeesBankAccountRuleUpdateRequestSerializer;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesBankAccountRulesControllerUpdateResponse
 */
export interface ApiV1EmployeesBankAccountRulesControllerUpdateResponse {
    /**
     * 
     * @type {ApiV1EmployeesBankAccountRuleSerializer}
     * @memberof ApiV1EmployeesBankAccountRulesControllerUpdateResponse
     */
    'employee_bank_account_rule'?: ApiV1EmployeesBankAccountRuleSerializer | null;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesBasicPayRuleSerializer
 */
export interface ApiV1EmployeesBasicPayRuleSerializer {
    /**
     * 
     * @type {number}
     * @memberof ApiV1EmployeesBasicPayRuleSerializer
     */
    'id'?: number;
    /**
     * 事業所ID
     * @type {number}
     * @memberof ApiV1EmployeesBasicPayRuleSerializer
     */
    'company_id'?: number;
    /**
     * 従業員ID
     * @type {number}
     * @memberof ApiV1EmployeesBasicPayRuleSerializer
     */
    'employee_id'?: number;
    /**
     * 給与方式 monthly: 月給, daily: 日給, hourly: 時給
     * @type {string}
     * @memberof ApiV1EmployeesBasicPayRuleSerializer
     */
    'pay_calc_type'?: ApiV1EmployeesBasicPayRuleSerializerPayCalcTypeEnum;
    /**
     * 基本給
     * @type {number}
     * @memberof ApiV1EmployeesBasicPayRuleSerializer
     */
    'pay_amount'?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesBasicPayRuleSerializerPayCalcTypeEnum {
    Monthly = 'monthly',
    Daily = 'daily',
    Hourly = 'hourly'
}

/**
 * 
 * @export
 * @interface ApiV1EmployeesBasicPayRuleUpdateRequestSerializer
 */
export interface ApiV1EmployeesBasicPayRuleUpdateRequestSerializer {
    /**
     * 給与方式 null不可 monthly: 月給, daily: 日給, hourly: 時給
     * @type {string}
     * @memberof ApiV1EmployeesBasicPayRuleUpdateRequestSerializer
     */
    'pay_calc_type': ApiV1EmployeesBasicPayRuleUpdateRequestSerializerPayCalcTypeEnum;
    /**
     * 基本給 null不可
     * @type {number}
     * @memberof ApiV1EmployeesBasicPayRuleUpdateRequestSerializer
     */
    'pay_amount': number;
}

/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesBasicPayRuleUpdateRequestSerializerPayCalcTypeEnum {
    Monthly = 'monthly',
    Daily = 'daily',
    Hourly = 'hourly'
}

/**
 * 
 * @export
 * @interface ApiV1EmployeesBasicPayRulesControllerShowResponse
 */
export interface ApiV1EmployeesBasicPayRulesControllerShowResponse {
    /**
     * 
     * @type {ApiV1EmployeesBasicPayRuleSerializer}
     * @memberof ApiV1EmployeesBasicPayRulesControllerShowResponse
     */
    'employee_basic_pay_rule'?: ApiV1EmployeesBasicPayRuleSerializer | null;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesBasicPayRulesControllerUpdateBody
 */
export interface ApiV1EmployeesBasicPayRulesControllerUpdateBody {
    /**
     * 更新対象事業所ID（必須）
     * @type {number}
     * @memberof ApiV1EmployeesBasicPayRulesControllerUpdateBody
     */
    'company_id': number;
    /**
     * 更新対象年（必須）
     * @type {number}
     * @memberof ApiV1EmployeesBasicPayRulesControllerUpdateBody
     */
    'year': number;
    /**
     * 更新対象月（必須）
     * @type {number}
     * @memberof ApiV1EmployeesBasicPayRulesControllerUpdateBody
     */
    'month': number;
    /**
     * 
     * @type {ApiV1EmployeesBasicPayRuleUpdateRequestSerializer}
     * @memberof ApiV1EmployeesBasicPayRulesControllerUpdateBody
     */
    'employee_basic_pay_rule': ApiV1EmployeesBasicPayRuleUpdateRequestSerializer;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesBasicPayRulesControllerUpdateResponse
 */
export interface ApiV1EmployeesBasicPayRulesControllerUpdateResponse {
    /**
     * 
     * @type {ApiV1EmployeesBasicPayRuleSerializer}
     * @memberof ApiV1EmployeesBasicPayRulesControllerUpdateResponse
     */
    'employee_basic_pay_rule'?: ApiV1EmployeesBasicPayRuleSerializer | null;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesControllerCreateBody
 */
export interface ApiV1EmployeesControllerCreateBody {
    /**
     * 作成対象事業所ID（必須）
     * @type {number}
     * @memberof ApiV1EmployeesControllerCreateBody
     */
    'company_id': number;
    /**
     * 
     * @type {ApiV1EmployeeCreateRequestSerializer}
     * @memberof ApiV1EmployeesControllerCreateBody
     */
    'employee': ApiV1EmployeeCreateRequestSerializer;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesControllerCreateResponse
 */
export interface ApiV1EmployeesControllerCreateResponse {
    /**
     * 
     * @type {ApiV1EmployeeSerializer}
     * @memberof ApiV1EmployeesControllerCreateResponse
     */
    'employee'?: ApiV1EmployeeSerializer;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesControllerShowResponse
 */
export interface ApiV1EmployeesControllerShowResponse {
    /**
     * 
     * @type {ApiV1EmployeeSerializer}
     * @memberof ApiV1EmployeesControllerShowResponse
     */
    'employee'?: ApiV1EmployeeSerializer;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesControllerUpdateBody
 */
export interface ApiV1EmployeesControllerUpdateBody {
    /**
     * 更新対象事業所ID（必須）
     * @type {number}
     * @memberof ApiV1EmployeesControllerUpdateBody
     */
    'company_id': number;
    /**
     * 更新対象年（必須）
     * @type {number}
     * @memberof ApiV1EmployeesControllerUpdateBody
     */
    'year': number;
    /**
     * 更新対象月（必須）
     * @type {number}
     * @memberof ApiV1EmployeesControllerUpdateBody
     */
    'month': number;
    /**
     * 
     * @type {ApiV1EmployeeUpdateRequestSerializer}
     * @memberof ApiV1EmployeesControllerUpdateBody
     */
    'employee': ApiV1EmployeeUpdateRequestSerializer;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesControllerUpdateResponse
 */
export interface ApiV1EmployeesControllerUpdateResponse {
    /**
     * 
     * @type {ApiV1EmployeeSerializer}
     * @memberof ApiV1EmployeesControllerUpdateResponse
     */
    'employee'?: ApiV1EmployeeSerializer;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesDependentRuleSerializer
 */
export interface ApiV1EmployeesDependentRuleSerializer {
    /**
     * 扶養親族ルールID
     * @type {number}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'id'?: number;
    /**
     * 事業所ID
     * @type {number}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'company_id'?: number;
    /**
     * 従業員ID
     * @type {number}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'employee_id'?: number;
    /**
     * 姓
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'last_name'?: string;
    /**
     * 名
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'first_name'?: string;
    /**
     * 姓カナ
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'last_name_kana'?: string | null;
    /**
     * 名カナ
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'first_name_kana'?: string | null;
    /**
     * 性別　unselected: 未選択, male: 男性, female: 女性
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'gender'?: ApiV1EmployeesDependentRuleSerializerGenderEnum;
    /**
     * 続柄 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'relationship'?: string;
    /**
     * 生年月日
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'birth_date'?: string;
    /**
     * 同居・別居 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'residence_type'?: string;
    /**
     * 住民票住所の郵便番号1
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'zipcode1'?: string | null;
    /**
     * 住民票住所の郵便番号2
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'zipcode2'?: string | null;
    /**
     * 住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
     * @type {number}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'prefecture_code'?: number | null;
    /**
     * 住民票住所の市区町村以降の住所
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'address'?: string | null;
    /**
     * 住民票住所の市区町村以降の住所カナ
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'address_kana'?: string | null;
    /**
     * 基礎年金番号
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'base_pension_num'?: string | null;
    /**
     * 年間所得
     * @type {number}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'income'?: number;
    /**
     * 年間収入
     * @type {number}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'annual_revenue'?: number;
    /**
     * 障害に該当するか na: 障害なし, general: 一般の障害者, heavy: 特別障害者
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'disability_type'?: string;
    /**
     * 職業
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'occupation'?: string | null;
    /**
     * 一年間の送金額
     * @type {number}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'annual_remittance_amount'?: number;
    /**
     * 扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleSerializer
     */
    'social_insurance_and_tax_dependent'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesDependentRuleSerializerGenderEnum {
    Unselected = 'unselected',
    Male = 'male',
    Female = 'female'
}

/**
 * 
 * @export
 * @interface ApiV1EmployeesDependentRuleUpdateRequestSerializer
 */
export interface ApiV1EmployeesDependentRuleUpdateRequestSerializer {
    /**
     * 扶養親族ID（idがない場合は新規作成になる)
     * @type {number}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'id'?: number;
    /**
     * 姓 null不可
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'last_name': string;
    /**
     * 名 null不可
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'first_name': string;
    /**
     * 姓カナ
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'last_name_kana'?: string;
    /**
     * 名カナ
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'first_name_kana'?: string;
    /**
     * 性別　unselected: 未選択, male: 男性, female: 女性（デフォルト: unselected: 未選択）
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'gender': ApiV1EmployeesDependentRuleUpdateRequestSerializerGenderEnum;
    /**
     * 続柄 null不可 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'relationship': ApiV1EmployeesDependentRuleUpdateRequestSerializerRelationshipEnum;
    /**
     * 生年月日 null不可
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'birth_date': string;
    /**
     * 同居・別居 null不可 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'residence_type': ApiV1EmployeesDependentRuleUpdateRequestSerializerResidenceTypeEnum;
    /**
     * 住民票住所の郵便番号1
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'zipcode1'?: string;
    /**
     * 住民票住所の郵便番号2
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'zipcode2'?: string;
    /**
     * 住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
     * @type {number}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'prefecture_code'?: number;
    /**
     * 住民票住所の市区町村以降の住所
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'address'?: string;
    /**
     * 住民票住所の市区町村以降の住所カナ
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'address_kana'?: string;
    /**
     * 基礎年金番号
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'base_pension_num'?: string;
    /**
     * 年間所得 null不可
     * @type {number}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'income': number;
    /**
     * 年間収入 null不可
     * @type {number}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'annual_revenue': number;
    /**
     * 障害に該当するか null不可 na: 障害なし, general: 一般の障害者, heavy: 特別障害者
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'disability_type': ApiV1EmployeesDependentRuleUpdateRequestSerializerDisabilityTypeEnum;
    /**
     * 職業
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'occupation'?: string;
    /**
     * 一年間の送金額
     * @type {number}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'annual_remittance_amount'?: number;
    /**
     * 扶養親族を削除するか
     * @type {boolean}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'destroy'?: boolean;
    /**
     * 扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ, not_dependent: 扶養していない
     * @type {string}
     * @memberof ApiV1EmployeesDependentRuleUpdateRequestSerializer
     */
    'social_insurance_and_tax_dependent': ApiV1EmployeesDependentRuleUpdateRequestSerializerSocialInsuranceAndTaxDependentEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesDependentRuleUpdateRequestSerializerGenderEnum {
    Unselected = 'unselected',
    Male = 'male',
    Female = 'female'
}
/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesDependentRuleUpdateRequestSerializerRelationshipEnum {
    Spouse = 'spouse',
    Father = 'father',
    Mother = 'mother',
    Child = 'child',
    SeniorBrother = 'senior_brother',
    JuniorBrother = 'junior_brother',
    SeniorSister = 'senior_sister',
    JuniorSister = 'junior_sister',
    Grandchild = 'grandchild',
    Grandfather = 'grandfather',
    Grandmother = 'grandmother',
    FatherInLaw = 'father_in_law',
    MotherInLaw = 'mother_in_law',
    GrandfatherInLaw = 'grandfather_in_law',
    GrandmotherInLaw = 'grandmother_in_law',
    Other = 'other',
    GreatGrandfather = 'great_grandfather',
    GreatGrandmother = 'great_grandmother',
    SpousesChild = 'spouses_child'
}
/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesDependentRuleUpdateRequestSerializerResidenceTypeEnum {
    LiveIn = 'live_in',
    Resident = 'resident',
    NonResident = 'non_resident'
}
/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesDependentRuleUpdateRequestSerializerDisabilityTypeEnum {
    Na = 'na',
    General = 'general',
    Heavy = 'heavy'
}
/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesDependentRuleUpdateRequestSerializerSocialInsuranceAndTaxDependentEnum {
    SocialInsuranceAndTax = 'social_insurance_and_tax',
    TaxOnly = 'tax_only',
    SocialInsuranceOnly = 'social_insurance_only',
    NotDependent = 'not_dependent'
}

/**
 * 
 * @export
 * @interface ApiV1EmployeesDependentRulesControllerBulkUpdateBody
 */
export interface ApiV1EmployeesDependentRulesControllerBulkUpdateBody {
    /**
     * 更新対象事業所ID（必須）
     * @type {number}
     * @memberof ApiV1EmployeesDependentRulesControllerBulkUpdateBody
     */
    'company_id': number;
    /**
     * 更新対象年（必須）
     * @type {number}
     * @memberof ApiV1EmployeesDependentRulesControllerBulkUpdateBody
     */
    'year': number;
    /**
     * 更新対象月（必須）
     * @type {number}
     * @memberof ApiV1EmployeesDependentRulesControllerBulkUpdateBody
     */
    'month': number;
    /**
     * 扶養親族ルール
     * @type {Array<ApiV1EmployeesDependentRuleUpdateRequestSerializer>}
     * @memberof ApiV1EmployeesDependentRulesControllerBulkUpdateBody
     */
    'employee_dependent_rules': Array<ApiV1EmployeesDependentRuleUpdateRequestSerializer>;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesDependentRulesControllerBulkUpdateResponse
 */
export interface ApiV1EmployeesDependentRulesControllerBulkUpdateResponse {
    /**
     * 
     * @type {Array<ApiV1EmployeesDependentRuleSerializer>}
     * @memberof ApiV1EmployeesDependentRulesControllerBulkUpdateResponse
     */
    'employee_dependent_rules'?: Array<ApiV1EmployeesDependentRuleSerializer>;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesDependentRulesControllerIndexResponse
 */
export interface ApiV1EmployeesDependentRulesControllerIndexResponse {
    /**
     * 
     * @type {Array<ApiV1EmployeesDependentRuleSerializer>}
     * @memberof ApiV1EmployeesDependentRulesControllerIndexResponse
     */
    'employee_dependent_rules'?: Array<ApiV1EmployeesDependentRuleSerializer>;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesEmployeeMultiHourlyWageWorkRecordSummarySerializer
 */
export interface ApiV1EmployeesEmployeeMultiHourlyWageWorkRecordSummarySerializer {
    /**
     * 時給名
     * @type {string}
     * @memberof ApiV1EmployeesEmployeeMultiHourlyWageWorkRecordSummarySerializer
     */
    'name'?: string;
    /**
     * 所定内労働時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesEmployeeMultiHourlyWageWorkRecordSummarySerializer
     */
    'total_normal_time_mins'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesHealthInsuranceRuleSerializer
 */
export interface ApiV1EmployeesHealthInsuranceRuleSerializer {
    /**
     * 健康保険ルールID
     * @type {number}
     * @memberof ApiV1EmployeesHealthInsuranceRuleSerializer
     */
    'id'?: number;
    /**
     * 事業所ID
     * @type {number}
     * @memberof ApiV1EmployeesHealthInsuranceRuleSerializer
     */
    'company_id'?: number;
    /**
     * 従業員ID
     * @type {number}
     * @memberof ApiV1EmployeesHealthInsuranceRuleSerializer
     */
    'employee_id'?: number;
    /**
     * 健康保険に加入しているかどうか
     * @type {boolean}
     * @memberof ApiV1EmployeesHealthInsuranceRuleSerializer
     */
    'entried'?: boolean;
    /**
     * 健康保険の被保険者整理番号
     * @type {string}
     * @memberof ApiV1EmployeesHealthInsuranceRuleSerializer
     */
    'reference_num'?: string | null;
    /**
     * 標準報酬月額
     * @type {number}
     * @memberof ApiV1EmployeesHealthInsuranceRuleSerializer
     */
    'standard_monthly_remuneration'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesHealthInsuranceRuleUpdateRequestSerializer
 */
export interface ApiV1EmployeesHealthInsuranceRuleUpdateRequestSerializer {
    /**
     * 健康保険に加入しているかどうか null不可
     * @type {boolean}
     * @memberof ApiV1EmployeesHealthInsuranceRuleUpdateRequestSerializer
     */
    'entried'?: boolean;
    /**
     * 健康保険の被保険者整理番号
     * @type {string}
     * @memberof ApiV1EmployeesHealthInsuranceRuleUpdateRequestSerializer
     */
    'reference_num'?: string;
    /**
     * 標準報酬月額 null不可
     * @type {number}
     * @memberof ApiV1EmployeesHealthInsuranceRuleUpdateRequestSerializer
     */
    'standard_monthly_remuneration': number;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesHealthInsuranceRulesControllerShowResponse
 */
export interface ApiV1EmployeesHealthInsuranceRulesControllerShowResponse {
    /**
     * 
     * @type {ApiV1EmployeesHealthInsuranceRuleSerializer}
     * @memberof ApiV1EmployeesHealthInsuranceRulesControllerShowResponse
     */
    'employee_health_insurance_rule'?: ApiV1EmployeesHealthInsuranceRuleSerializer | null;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesHealthInsuranceRulesControllerUpdateBody
 */
export interface ApiV1EmployeesHealthInsuranceRulesControllerUpdateBody {
    /**
     * 更新対象事業所ID（必須）
     * @type {number}
     * @memberof ApiV1EmployeesHealthInsuranceRulesControllerUpdateBody
     */
    'company_id': number;
    /**
     * 更新対象年（必須）
     * @type {number}
     * @memberof ApiV1EmployeesHealthInsuranceRulesControllerUpdateBody
     */
    'year': number;
    /**
     * 更新対象月（必須）
     * @type {number}
     * @memberof ApiV1EmployeesHealthInsuranceRulesControllerUpdateBody
     */
    'month': number;
    /**
     * 
     * @type {ApiV1EmployeesHealthInsuranceRuleUpdateRequestSerializer}
     * @memberof ApiV1EmployeesHealthInsuranceRulesControllerUpdateBody
     */
    'employee_health_insurance_rule': ApiV1EmployeesHealthInsuranceRuleUpdateRequestSerializer;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesHealthInsuranceRulesControllerUpdateResponse
 */
export interface ApiV1EmployeesHealthInsuranceRulesControllerUpdateResponse {
    /**
     * 
     * @type {ApiV1EmployeesHealthInsuranceRuleSerializer}
     * @memberof ApiV1EmployeesHealthInsuranceRulesControllerUpdateResponse
     */
    'employee_health_insurance_rule'?: ApiV1EmployeesHealthInsuranceRuleSerializer | null;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesIndexSerializer
 */
export interface ApiV1EmployeesIndexSerializer {
    /**
     * 
     * @type {Array<ApiV1EmployeeSerializer>}
     * @memberof ApiV1EmployeesIndexSerializer
     */
    'employees'?: Array<ApiV1EmployeeSerializer>;
    /**
     * 
     * @type {number}
     * @memberof ApiV1EmployeesIndexSerializer
     */
    'total_count'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesProfileRuleSerializer
 */
export interface ApiV1EmployeesProfileRuleSerializer {
    /**
     * 
     * @type {number}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'id'?: number;
    /**
     * 事業所ID
     * @type {number}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'company_id'?: number;
    /**
     * 従業員ID
     * @type {number}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'employee_id'?: number;
    /**
     * 姓
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'last_name'?: string;
    /**
     * 名
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'first_name'?: string;
    /**
     * 姓カナ
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'last_name_kana'?: string;
    /**
     * 名カナ
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'first_name_kana'?: string;
    /**
     * 住民票住所の郵便番号1
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'zipcode1'?: string | null;
    /**
     * 住民票住所の郵便番号2
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'zipcode2'?: string | null;
    /**
     * 住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
     * @type {number}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'prefecture_code'?: number | null;
    /**
     * 住民票住所の市区町村以降の住所
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'address'?: string | null;
    /**
     * 住民票住所の市区町村以降の住所カナ
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'address_kana'?: string;
    /**
     * 電話番号1
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'phone1'?: string | null;
    /**
     * 電話番号2
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'phone2'?: string | null;
    /**
     * 電話番号3
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'phone3'?: string | null;
    /**
     * 現住所の郵便番号１
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'residential_zipcode1'?: string | null;
    /**
     * 現住所の郵便番号２
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'residential_zipcode2'?: string | null;
    /**
     * 現住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
     * @type {number}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'residential_prefecture_code'?: number | null;
    /**
     * 現住所の住所
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'residential_address'?: string | null;
    /**
     * 現住所の住所カナ
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'residential_address_kana'?: string | null;
    /**
     * 雇用形態 board-member: 役員, (空文字列): 役員以外
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'employment_type'?: string | null;
    /**
     * 肩書
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'title'?: string | null;
    /**
     * 性別　unselected: 未選択, male: 男性, female: 女性
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'gender'?: ApiV1EmployeesProfileRuleSerializerGenderEnum;
    /**
     * 配偶者の有無
     * @type {boolean}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'married'?: boolean;
    /**
     * 勤労学生かどうか
     * @type {boolean}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'is_working_student'?: boolean;
    /**
     * 寡夫／寡婦かどうか na: 空白, widower: 寡夫, widow: 寡婦, special_widow: 特別寡婦
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'widow_type'?: string;
    /**
     * 障害者かどうか na: 空白, general: 障害者, heavy: 特別障害者
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleSerializer
     */
    'disability_type'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesProfileRuleSerializerGenderEnum {
    Unselected = 'unselected',
    Male = 'male',
    Female = 'female'
}

/**
 * 
 * @export
 * @interface ApiV1EmployeesProfileRuleUpdateRequestSerializer
 */
export interface ApiV1EmployeesProfileRuleUpdateRequestSerializer {
    /**
     * 姓 null不可
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'last_name': string;
    /**
     * 名 null不可
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'first_name': string;
    /**
     * 姓カナ
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'last_name_kana': string;
    /**
     * 名カナ
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'first_name_kana': string;
    /**
     * 住民票住所の郵便番号1
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'zipcode1'?: string;
    /**
     * 住民票住所の郵便番号2
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'zipcode2'?: string;
    /**
     * 住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
     * @type {number}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'prefecture_code'?: number;
    /**
     * 住民票住所の市区町村以降の住所
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'address'?: string;
    /**
     * 住民票住所の市区町村以降の住所カナ
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'address_kana'?: string;
    /**
     * 電話番号1
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'phone1'?: string;
    /**
     * 電話番号2
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'phone2'?: string;
    /**
     * 電話番号3
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'phone3'?: string;
    /**
     * 現住所の郵便番号１
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'residential_zipcode1'?: string;
    /**
     * 現住所の郵便番号２
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'residential_zipcode2'?: string;
    /**
     * 現住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
     * @type {number}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'residential_prefecture_code'?: number;
    /**
     * 現住所の住所
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'residential_address'?: string;
    /**
     * 現住所の住所カナ
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'residential_address_kana'?: string;
    /**
     * 雇用形態 board-member: 役員, (空文字列): 役員以外
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'employment_type'?: ApiV1EmployeesProfileRuleUpdateRequestSerializerEmploymentTypeEnum;
    /**
     * 肩書
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'title'?: string;
    /**
     * 性別　unselected: 未選択, male: 男性, female: 女性（デフォルト: unselected: 未選択）
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'gender'?: ApiV1EmployeesProfileRuleUpdateRequestSerializerGenderEnum;
    /**
     * null不可 配偶者の有無
     * @type {boolean}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'married'?: boolean;
    /**
     * null不可 勤労学生かどうか
     * @type {boolean}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'is_working_student'?: boolean;
    /**
     * 寡夫／寡婦かどうか null不可 na: 空白, widower: 寡夫, widow: 寡婦, special_widow: 特別寡婦, one_parent: ひとり親
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'widow_type'?: ApiV1EmployeesProfileRuleUpdateRequestSerializerWidowTypeEnum;
    /**
     * 障害者かどうか null不可 na: 空白, general: 障害者, heavy: 特別障害者
     * @type {string}
     * @memberof ApiV1EmployeesProfileRuleUpdateRequestSerializer
     */
    'disability_type'?: ApiV1EmployeesProfileRuleUpdateRequestSerializerDisabilityTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesProfileRuleUpdateRequestSerializerEmploymentTypeEnum {
    BoardMember = 'board-member',
    Empty = ''
}
/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesProfileRuleUpdateRequestSerializerGenderEnum {
    Unselected = 'unselected',
    Male = 'male',
    Female = 'female'
}
/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesProfileRuleUpdateRequestSerializerWidowTypeEnum {
    Na = 'na',
    Widower = 'widower',
    Widow = 'widow',
    SpecialWidow = 'special_widow',
    OneParent = 'one_parent'
}
/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesProfileRuleUpdateRequestSerializerDisabilityTypeEnum {
    Na = 'na',
    General = 'general',
    Heavy = 'heavy'
}

/**
 * 
 * @export
 * @interface ApiV1EmployeesProfileRulesControllerShowResponse
 */
export interface ApiV1EmployeesProfileRulesControllerShowResponse {
    /**
     * 
     * @type {ApiV1EmployeesProfileRuleSerializer}
     * @memberof ApiV1EmployeesProfileRulesControllerShowResponse
     */
    'employee_profile_rule'?: ApiV1EmployeesProfileRuleSerializer | null;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesProfileRulesControllerUpdateBody
 */
export interface ApiV1EmployeesProfileRulesControllerUpdateBody {
    /**
     * 更新対象事業所ID（必須）
     * @type {number}
     * @memberof ApiV1EmployeesProfileRulesControllerUpdateBody
     */
    'company_id': number;
    /**
     * 更新対象年（必須）
     * @type {number}
     * @memberof ApiV1EmployeesProfileRulesControllerUpdateBody
     */
    'year': number;
    /**
     * 更新対象月（必須）
     * @type {number}
     * @memberof ApiV1EmployeesProfileRulesControllerUpdateBody
     */
    'month': number;
    /**
     * 
     * @type {ApiV1EmployeesProfileRuleUpdateRequestSerializer}
     * @memberof ApiV1EmployeesProfileRulesControllerUpdateBody
     */
    'employee_profile_rule': ApiV1EmployeesProfileRuleUpdateRequestSerializer;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesProfileRulesControllerUpdateResponse
 */
export interface ApiV1EmployeesProfileRulesControllerUpdateResponse {
    /**
     * 
     * @type {ApiV1EmployeesProfileRuleSerializer}
     * @memberof ApiV1EmployeesProfileRulesControllerUpdateResponse
     */
    'employee_profile_rule'?: ApiV1EmployeesProfileRuleSerializer | null;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesTimeClockSerializer
 */
export interface ApiV1EmployeesTimeClockSerializer {
    /**
     * 打刻ID
     * @type {number}
     * @memberof ApiV1EmployeesTimeClockSerializer
     */
    'id'?: number;
    /**
     * 打刻日
     * @type {string}
     * @memberof ApiV1EmployeesTimeClockSerializer
     */
    'date'?: string;
    /**
     * 打刻種別
     * @type {string}
     * @memberof ApiV1EmployeesTimeClockSerializer
     */
    'type'?: ApiV1EmployeesTimeClockSerializerTypeEnum;
    /**
     * 打刻時刻
     * @type {string}
     * @memberof ApiV1EmployeesTimeClockSerializer
     */
    'datetime'?: string;
    /**
     * オリジナルの打刻時間
     * @type {string}
     * @memberof ApiV1EmployeesTimeClockSerializer
     */
    'original_datetime'?: string;
    /**
     * 打刻メモ
     * @type {string}
     * @memberof ApiV1EmployeesTimeClockSerializer
     */
    'note'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesTimeClockSerializerTypeEnum {
    ClockIn = 'clock_in',
    BreakBegin = 'break_begin',
    BreakEnd = 'break_end',
    ClockOut = 'clock_out'
}

/**
 * 
 * @export
 * @interface ApiV1EmployeesTimeClocksControllerAvailableTypesResponse
 */
export interface ApiV1EmployeesTimeClocksControllerAvailableTypesResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1EmployeesTimeClocksControllerAvailableTypesResponse
     */
    'available_types'?: Array<ApiV1EmployeesTimeClocksControllerAvailableTypesResponseAvailableTypesEnum>;
    /**
     * 打刻基準日
     * @type {string}
     * @memberof ApiV1EmployeesTimeClocksControllerAvailableTypesResponse
     */
    'base_date'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesTimeClocksControllerAvailableTypesResponseAvailableTypesEnum {
    ClockIn = 'clock_in',
    BreakBegin = 'break_begin',
    BreakEnd = 'break_end',
    ClockOut = 'clock_out'
}

/**
 * 
 * @export
 * @interface ApiV1EmployeesTimeClocksControllerCreateBody
 */
export interface ApiV1EmployeesTimeClocksControllerCreateBody {
    /**
     * (required)
     * @type {number}
     * @memberof ApiV1EmployeesTimeClocksControllerCreateBody
     */
    'company_id': number;
    /**
     * 打刻種別（required）[\'clock_in\',\'break_begin\',\'break_end\',\'clock_out\']の何れか
     * @type {string}
     * @memberof ApiV1EmployeesTimeClocksControllerCreateBody
     */
    'type': ApiV1EmployeesTimeClocksControllerCreateBodyTypeEnum;
    /**
     * 打刻日。打刻が日をまたぐ場合に、前日の日付を指定します。(YYYY-MM-DD)(例:2018-07-31)
     * @type {string}
     * @memberof ApiV1EmployeesTimeClocksControllerCreateBody
     */
    'base_date'?: string;
    /**
     * 打刻時刻。(YYYY-MM-DD&nbsp;HH:MM:SS)(例:2018-07-31&nbsp;08:00:00)
     * @type {string}
     * @memberof ApiV1EmployeesTimeClocksControllerCreateBody
     */
    'datetime'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesTimeClocksControllerCreateBodyTypeEnum {
    ClockIn = 'clock_in',
    BreakBegin = 'break_begin',
    BreakEnd = 'break_end',
    ClockOut = 'clock_out'
}

/**
 * 
 * @export
 * @interface ApiV1EmployeesTimeClocksControllerCreateResponse
 */
export interface ApiV1EmployeesTimeClocksControllerCreateResponse {
    /**
     * 
     * @type {ApiV1EmployeesTimeClockSerializer}
     * @memberof ApiV1EmployeesTimeClocksControllerCreateResponse
     */
    'employee_time_clock'?: ApiV1EmployeesTimeClockSerializer;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesTimeClocksControllerShowResponse
 */
export interface ApiV1EmployeesTimeClocksControllerShowResponse {
    /**
     * 
     * @type {ApiV1EmployeesTimeClockSerializer}
     * @memberof ApiV1EmployeesTimeClocksControllerShowResponse
     */
    'employee_time_clock'?: ApiV1EmployeesTimeClockSerializer;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesWelfarePensionInsuranceRuleSerializer
 */
export interface ApiV1EmployeesWelfarePensionInsuranceRuleSerializer {
    /**
     * 
     * @type {number}
     * @memberof ApiV1EmployeesWelfarePensionInsuranceRuleSerializer
     */
    'id'?: number;
    /**
     * 事業所ID
     * @type {number}
     * @memberof ApiV1EmployeesWelfarePensionInsuranceRuleSerializer
     */
    'company_id'?: number;
    /**
     * 従業員ID
     * @type {number}
     * @memberof ApiV1EmployeesWelfarePensionInsuranceRuleSerializer
     */
    'employee_id'?: number;
    /**
     * 厚生年金保険に加入しているかどうか
     * @type {boolean}
     * @memberof ApiV1EmployeesWelfarePensionInsuranceRuleSerializer
     */
    'entried'?: boolean;
    /**
     * 厚生年金保険の被保険者整理番号
     * @type {string}
     * @memberof ApiV1EmployeesWelfarePensionInsuranceRuleSerializer
     */
    'reference_num'?: string | null;
    /**
     * 標準報酬月額
     * @type {number}
     * @memberof ApiV1EmployeesWelfarePensionInsuranceRuleSerializer
     */
    'standard_monthly_remuneration'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesWelfarePensionInsuranceRuleUpdateRequestSerializer
 */
export interface ApiV1EmployeesWelfarePensionInsuranceRuleUpdateRequestSerializer {
    /**
     * 厚生年金保険に加入しているかどうか null不可
     * @type {boolean}
     * @memberof ApiV1EmployeesWelfarePensionInsuranceRuleUpdateRequestSerializer
     */
    'entried'?: boolean;
    /**
     * 厚生年金保険の被保険者整理番号
     * @type {string}
     * @memberof ApiV1EmployeesWelfarePensionInsuranceRuleUpdateRequestSerializer
     */
    'reference_num'?: string;
    /**
     * 標準報酬月額 null不可
     * @type {number}
     * @memberof ApiV1EmployeesWelfarePensionInsuranceRuleUpdateRequestSerializer
     */
    'standard_monthly_remuneration': number;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesWelfarePensionInsuranceRulesControllerShowResponse
 */
export interface ApiV1EmployeesWelfarePensionInsuranceRulesControllerShowResponse {
    /**
     * 
     * @type {ApiV1EmployeesWelfarePensionInsuranceRuleSerializer}
     * @memberof ApiV1EmployeesWelfarePensionInsuranceRulesControllerShowResponse
     */
    'employee_welfare_pension_insurance_rule'?: ApiV1EmployeesWelfarePensionInsuranceRuleSerializer | null;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody
 */
export interface ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody {
    /**
     * 更新対象事業所ID（必須）
     * @type {number}
     * @memberof ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody
     */
    'company_id': number;
    /**
     * 更新対象年（必須）
     * @type {number}
     * @memberof ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody
     */
    'year': number;
    /**
     * 更新対象月（必須）
     * @type {number}
     * @memberof ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody
     */
    'month': number;
    /**
     * 
     * @type {ApiV1EmployeesWelfarePensionInsuranceRuleUpdateRequestSerializer}
     * @memberof ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody
     */
    'employee_welfare_pension_insurance_rule': ApiV1EmployeesWelfarePensionInsuranceRuleUpdateRequestSerializer;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateResponse
 */
export interface ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateResponse {
    /**
     * 
     * @type {ApiV1EmployeesWelfarePensionInsuranceRuleSerializer}
     * @memberof ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateResponse
     */
    'employee_welfare_pension_insurance_rule'?: ApiV1EmployeesWelfarePensionInsuranceRuleSerializer | null;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesWorkRecordSerializer
 */
export interface ApiV1EmployeesWorkRecordSerializer {
    /**
     * 休憩時間のリスト
     * @type {Array<ApiV1EmployeesWorkRecordTimeRangeResponseSerializer>}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'break_records'?: Array<ApiV1EmployeesWorkRecordTimeRangeResponseSerializer>;
    /**
     * 出勤時間
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'clock_in_at'?: string | null;
    /**
     * 退勤時間
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'clock_out_at'?: string | null;
    /**
     * 対象日付
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'date'?: string;
    /**
     * 勤務パターン - normal_day: 所定労働日 - prescribed_holiday: 所定休日 - legal_holiday: 法定休日
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'day_pattern'?: ApiV1EmployeesWorkRecordSerializerDayPatternEnum;
    /**
     * スケジュールパターン - substitute_holiday_work: 振替出勤 - substitute_holiday: 振替休日 - compensatory_holiday_work: 代休出勤 - compensatory_holiday: 代休 - special_holiday: 特別休暇
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'schedule_pattern'?: ApiV1EmployeesWorkRecordSerializerSchedulePatternEnum;
    /**
     * 早退分の時間（分単位）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'early_leaving_mins'?: number;
    /**
     * 時間休を利用した時間（分単位）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'hourly_paid_holiday_mins'?: number;
    /**
     * 欠勤かどうか
     * @type {boolean}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'is_absence'?: boolean;
    /**
     * 勤怠データが編集可能かどうか
     * @type {boolean}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'is_editable'?: boolean;
    /**
     * 遅刻分の時間（分単位）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'lateness_mins'?: number;
    /**
     * 所定労働開始時刻
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'normal_work_clock_in_at'?: string | null;
    /**
     * 所定労働終了時刻
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'normal_work_clock_out_at'?: string | null;
    /**
     * 所定労働時間
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'normal_work_mins'?: number;
    /**
     * 有給によって計上される所定労働時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'normal_work_mins_by_paid_holiday'?: number;
    /**
     * 勤怠メモ
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'note'?: string;
    /**
     * この日に対する有給取得日数。半休の場合は0.5が入ります。時間休の場合はhourly_paid_holiday_minsを所定労働時間で割った値が入るため、実際の時間を確認するにはhourly_paid_holiday_minsを参照してください。
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'paid_holiday'?: number;
    /**
     * 欠勤・遅刻・早退を控除対象時間に算入するかどうか
     * @type {boolean}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'use_attendance_deduction'?: boolean;
    /**
     * デフォルトの勤務時間設定を使っているかどうか
     * @type {boolean}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'use_default_work_pattern'?: boolean;
    /**
     * 時間外労働時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'total_overtime_work_mins'?: number;
    /**
     * 休日労働時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'total_holiday_work_mins'?: number;
    /**
     * 深夜労働時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSerializer
     */
    'total_latenight_work_mins'?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesWorkRecordSerializerDayPatternEnum {
    NormalDay = 'normal_day',
    PrescribedHoliday = 'prescribed_holiday',
    LegalHoliday = 'legal_holiday'
}
/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesWorkRecordSerializerSchedulePatternEnum {
    Empty = '',
    SubstituteHolidayWork = 'substitute_holiday_work',
    SubstituteHoliday = 'substitute_holiday',
    CompensatoryHolidayWork = 'compensatory_holiday_work',
    CompensatoryHoliday = 'compensatory_holiday',
    SpecialHoliday = 'special_holiday'
}

/**
 * 
 * @export
 * @interface ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
 */
export interface ApiV1EmployeesWorkRecordSummaryControllerUpdateBody {
    /**
     * 事業所ID（必須）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'company_id': number;
    /**
     * 総勤務日数
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'work_days'?: number;
    /**
     * 所定労働日の勤務日数
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'work_days_on_weekdays'?: number;
    /**
     * 所定休日の勤務日数
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'work_days_on_prescribed_holidays'?: number;
    /**
     * 法定休日の勤務日数
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'work_days_on_legal_holidays'?: number;
    /**
     * 労働時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'total_work_mins'?: number;
    /**
     * 所定労働時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'total_normal_work_mins'?: number;
    /**
     * 給与計算に用いられる法定内残業時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'total_excess_statutory_work_mins'?: number;
    /**
     * 法定休日労働時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'total_holiday_work_mins'?: number;
    /**
     * 深夜労働時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'total_latenight_work_mins'?: number;
    /**
     * 実労働時間ベースの法定内残業時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'total_actual_excess_statutory_work_mins'?: number;
    /**
     * 時間外労働時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'total_overtime_work_mins'?: number;
    /**
     * 欠勤日数
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'num_absences'?: number;
    /**
     * 控除対象の欠勤日数
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'num_absences_for_deduction'?: number;
    /**
     * 遅刻時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'total_lateness_mins'?: number;
    /**
     * 控除対象の遅刻時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'total_lateness_mins_for_deduction'?: number;
    /**
     * 早退時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'total_early_leaving_mins'?: number;
    /**
     * 控除対象の早退時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'total_early_leaving_mins_for_deduction'?: number;
    /**
     * 有給取得日数
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'num_paid_holidays'?: number;
    /**
     * 不足時間（分）（フレックスタイム制でのみ使用）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'total_shortage_work_mins'?: number;
    /**
     * 支給対象の法定内残業時間（分）（裁量労働制でのみ使用）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'total_deemed_paid_excess_statutory_work_mins'?: number;
    /**
     * 支給対象の法定内残業時間（分）（裁量労働制でのみ使用）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummaryControllerUpdateBody
     */
    'total_deemed_paid_overtime_except_normal_work_mins'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesWorkRecordSummarySerializer
 */
export interface ApiV1EmployeesWorkRecordSummarySerializer {
    /**
     * 給与支払い年
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'year'?: number;
    /**
     * 給与支払い月
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'month'?: number;
    /**
     * 集計開始日
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'start_date'?: string;
    /**
     * 集計終了日
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'end_date'?: string;
    /**
     * 労働日数
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'work_days'?: number;
    /**
     * 総勤務時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'total_work_mins'?: number;
    /**
     * 所定内労働時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'total_normal_work_mins'?: number;
    /**
     * 給与計算に用いられる法定内残業時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'total_excess_statutory_work_mins'?: number;
    /**
     * 所定外法定外労働時間
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'total_overtime_except_normal_work_mins'?: number;
    /**
     * 所定内法定外労働時間（裁量労働制の場合はみなしベース）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'total_overtime_within_normal_work_mins'?: number;
    /**
     * 法定休日労働時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'total_holiday_work_mins'?: number;
    /**
     * 深夜労働allow(company)時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'total_latenight_work_mins'?: number;
    /**
     * 欠勤日数
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'num_absences'?: number;
    /**
     * 有給取得日数
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'num_paid_holidays'?: number;
    /**
     * 
     * @type {ApiV1HolidaysAndHoursSerializer}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'num_paid_holidays_and_hours'?: ApiV1HolidaysAndHoursSerializer;
    /**
     * 有給残日数
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'num_paid_holidays_left'?: number;
    /**
     * 
     * @type {ApiV1HolidaysAndHoursSerializer}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'num_paid_holidays_and_hours_left'?: ApiV1HolidaysAndHoursSerializer;
    /**
     * 振替休日の使用日数
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'num_substitute_holidays_used'?: number;
    /**
     * 代休の使用日数
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'num_compensatory_holidays_used'?: number;
    /**
     * 特別休暇の使用日数
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'num_special_holidays_used'?: number;
    /**
     * 
     * @type {ApiV1HolidaysAndHoursSerializer}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'num_special_holidays_and_hours_used'?: ApiV1HolidaysAndHoursSerializer;
    /**
     * 遅刻早退時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'total_lateness_and_early_leaving_mins'?: number;
    /**
     * 複数時給の労働時間の内訳（複数時給を設定している従業員のみ）
     * @type {Array<ApiV1EmployeesEmployeeMultiHourlyWageWorkRecordSummarySerializer>}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'multi_hourly_wages'?: Array<ApiV1EmployeesEmployeeMultiHourlyWageWorkRecordSummarySerializer>;
    /**
     * 日々の勤怠情報
     * @type {Array<ApiV1EmployeesWorkRecordSerializer>}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'work_records'?: Array<ApiV1EmployeesWorkRecordSerializer>;
    /**
     * 不足時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'total_shortage_work_mins'?: number | null;
    /**
     * 支給対象の法定内残業時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'total_deemed_paid_excess_statutory_work_mins'?: number | null;
    /**
     * 支給対象の時間外労働時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordSummarySerializer
     */
    'total_deemed_paid_overtime_except_normal_work_mins'?: number | null;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesWorkRecordTimeRangeResponseSerializer
 */
export interface ApiV1EmployeesWorkRecordTimeRangeResponseSerializer {
    /**
     * 開始時刻
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordTimeRangeResponseSerializer
     */
    'clock_in_at'?: string;
    /**
     * 終了時刻
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordTimeRangeResponseSerializer
     */
    'clock_out_at'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesWorkRecordTimeRangeSerializer
 */
export interface ApiV1EmployeesWorkRecordTimeRangeSerializer {
    /**
     * 開始時刻
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordTimeRangeSerializer
     */
    'clock_in_at': string;
    /**
     * 終了時刻
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordTimeRangeSerializer
     */
    'clock_out_at': string;
}
/**
 * 
 * @export
 * @interface ApiV1EmployeesWorkRecordsControllerUpdateBody
 */
export interface ApiV1EmployeesWorkRecordsControllerUpdateBody {
    /**
     * 事業所ID（必須）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordsControllerUpdateBody
     */
    'company_id': number;
    /**
     * 休憩時間のリスト
     * @type {Array<ApiV1EmployeesWorkRecordTimeRangeSerializer>}
     * @memberof ApiV1EmployeesWorkRecordsControllerUpdateBody
     */
    'break_records'?: Array<ApiV1EmployeesWorkRecordTimeRangeSerializer>;
    /**
     * 出勤時刻
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordsControllerUpdateBody
     */
    'clock_in_at'?: string;
    /**
     * 退勤時刻
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordsControllerUpdateBody
     */
    'clock_out_at'?: string;
    /**
     * 勤務パターン（所定労働日: normal_day, 所定休日: prescribed_holiday, 法定休日: legal_holiday）
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordsControllerUpdateBody
     */
    'day_pattern'?: ApiV1EmployeesWorkRecordsControllerUpdateBodyDayPatternEnum;
    /**
     * 早退分の時間（分単位）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordsControllerUpdateBody
     */
    'early_leaving_mins'?: number;
    /**
     * 欠勤かどうか
     * @type {boolean}
     * @memberof ApiV1EmployeesWorkRecordsControllerUpdateBody
     */
    'is_absence'?: boolean;
    /**
     * 遅刻分の時間（分単位）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordsControllerUpdateBody
     */
    'lateness_mins'?: number;
    /**
     * 所定労働開始時刻。指定しない場合はデフォルト設定が使用されます。
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordsControllerUpdateBody
     */
    'normal_work_clock_in_at'?: string;
    /**
     * 所定労働終了時刻。指定しない場合はデフォルト設定が使用されます。
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordsControllerUpdateBody
     */
    'normal_work_clock_out_at'?: string;
    /**
     * 所定労働時間。指定しない場合はデフォルト設定が使用されます。
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordsControllerUpdateBody
     */
    'normal_work_mins'?: number;
    /**
     * 有給によって計上される所定労働時間（分）
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordsControllerUpdateBody
     */
    'normal_work_mins_by_paid_holiday'?: number;
    /**
     * 勤怠メモ
     * @type {string}
     * @memberof ApiV1EmployeesWorkRecordsControllerUpdateBody
     */
    'note'?: string;
    /**
     * この日の有休取得数。0.5日単位で指定します。
     * @type {number}
     * @memberof ApiV1EmployeesWorkRecordsControllerUpdateBody
     */
    'paid_holiday'?: number;
    /**
     * 欠勤・遅刻・早退を控除対象時間に算入するかどうか
     * @type {boolean}
     * @memberof ApiV1EmployeesWorkRecordsControllerUpdateBody
     */
    'use_attendance_deduction'?: boolean;
    /**
     * デフォルトの勤務設定を使うかどうか。
     * @type {boolean}
     * @memberof ApiV1EmployeesWorkRecordsControllerUpdateBody
     */
    'use_default_work_pattern'?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum ApiV1EmployeesWorkRecordsControllerUpdateBodyDayPatternEnum {
    NormalDay = 'normal_day',
    PrescribedHoliday = 'prescribed_holiday',
    LegalHoliday = 'legal_holiday'
}

/**
 * 
 * @export
 * @interface ApiV1GroupCreateRequest
 */
export interface ApiV1GroupCreateRequest {
    /**
     * 作成対象事業所ID（必須）
     * @type {number}
     * @memberof ApiV1GroupCreateRequest
     */
    'company_id': number;
    /**
     * 
     * @type {ApiV1GroupCreateRequestParams}
     * @memberof ApiV1GroupCreateRequest
     */
    'group': ApiV1GroupCreateRequestParams;
}
/**
 * 
 * @export
 * @interface ApiV1GroupCreateRequestParams
 */
export interface ApiV1GroupCreateRequestParams {
    /**
     * 部門コード
     * @type {string}
     * @memberof ApiV1GroupCreateRequestParams
     */
    'code'?: string;
    /**
     * 部門名称（必須）
     * @type {string}
     * @memberof ApiV1GroupCreateRequestParams
     */
    'name': string;
    /**
     * 親部門ID
     * @type {number}
     * @memberof ApiV1GroupCreateRequestParams
     */
    'parent_group_id'?: number | null;
}
/**
 * 
 * @export
 * @interface ApiV1GroupMembershipSerializer
 */
export interface ApiV1GroupMembershipSerializer {
    /**
     * 開始日
     * @type {string}
     * @memberof ApiV1GroupMembershipSerializer
     */
    'start_date'?: string;
    /**
     * 終了日
     * @type {string}
     * @memberof ApiV1GroupMembershipSerializer
     */
    'end_date'?: string;
    /**
     * 部門ID
     * @type {number}
     * @memberof ApiV1GroupMembershipSerializer
     */
    'group_id'?: number;
    /**
     * 部門コード
     * @type {string}
     * @memberof ApiV1GroupMembershipSerializer
     */
    'group_code'?: string;
    /**
     * 部門名称
     * @type {string}
     * @memberof ApiV1GroupMembershipSerializer
     */
    'group_name'?: string;
    /**
     * 部門階層レベル
     * @type {number}
     * @memberof ApiV1GroupMembershipSerializer
     */
    'level'?: number;
    /**
     * 役職ID
     * @type {number}
     * @memberof ApiV1GroupMembershipSerializer
     */
    'position_id'?: number;
    /**
     * 役職コード
     * @type {string}
     * @memberof ApiV1GroupMembershipSerializer
     */
    'position_code'?: string;
    /**
     * 役職名称
     * @type {string}
     * @memberof ApiV1GroupMembershipSerializer
     */
    'position_name'?: string;
    /**
     * 親部門ID
     * @type {number}
     * @memberof ApiV1GroupMembershipSerializer
     */
    'parent_group_id'?: number | null;
    /**
     * 親部門コード
     * @type {string}
     * @memberof ApiV1GroupMembershipSerializer
     */
    'parent_group_code'?: string | null;
    /**
     * 親部門名称
     * @type {string}
     * @memberof ApiV1GroupMembershipSerializer
     */
    'parent_group_name'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1GroupResponse
 */
export interface ApiV1GroupResponse {
    /**
     * 
     * @type {ApiV1GroupResponseParams}
     * @memberof ApiV1GroupResponse
     */
    'group': ApiV1GroupResponseParams;
}
/**
 * 
 * @export
 * @interface ApiV1GroupResponseParams
 */
export interface ApiV1GroupResponseParams {
    /**
     * 部門ID
     * @type {number}
     * @memberof ApiV1GroupResponseParams
     */
    'id': number;
    /**
     * 部門コード
     * @type {string}
     * @memberof ApiV1GroupResponseParams
     */
    'code'?: string | null;
    /**
     * 部門名称
     * @type {string}
     * @memberof ApiV1GroupResponseParams
     */
    'name': string;
    /**
     * 部門階層レベル（数字が大きいほど階層が深いです。）
     * @type {number}
     * @memberof ApiV1GroupResponseParams
     */
    'level': number;
    /**
     * 親部門ID
     * @type {number}
     * @memberof ApiV1GroupResponseParams
     */
    'parent_group_id'?: number | null;
    /**
     * 親部門コード
     * @type {string}
     * @memberof ApiV1GroupResponseParams
     */
    'parent_group_code'?: string | null;
    /**
     * 親部門名称
     * @type {string}
     * @memberof ApiV1GroupResponseParams
     */
    'parent_group_name'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1GroupUpdateRequest
 */
export interface ApiV1GroupUpdateRequest {
    /**
     * 作成対象事業所ID（必須）
     * @type {number}
     * @memberof ApiV1GroupUpdateRequest
     */
    'company_id': number;
    /**
     * 
     * @type {ApiV1GroupUpdateRequestParams}
     * @memberof ApiV1GroupUpdateRequest
     */
    'group': ApiV1GroupUpdateRequestParams;
}
/**
 * 
 * @export
 * @interface ApiV1GroupUpdateRequestParams
 */
export interface ApiV1GroupUpdateRequestParams {
    /**
     * 部門コード
     * @type {string}
     * @memberof ApiV1GroupUpdateRequestParams
     */
    'code'?: string;
    /**
     * 部門名称
     * @type {string}
     * @memberof ApiV1GroupUpdateRequestParams
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ApiV1GroupsIndexResponse
 */
export interface ApiV1GroupsIndexResponse {
    /**
     * 
     * @type {Array<ApiV1GroupResponseParams>}
     * @memberof ApiV1GroupsIndexResponse
     */
    'groups': Array<ApiV1GroupResponseParams>;
    /**
     * 
     * @type {number}
     * @memberof ApiV1GroupsIndexResponse
     */
    'total_count': number;
}
/**
 * 
 * @export
 * @interface ApiV1HolidaysAndHoursSerializer
 */
export interface ApiV1HolidaysAndHoursSerializer {
    /**
     * 日数 0.5は半休を表す
     * @type {number}
     * @memberof ApiV1HolidaysAndHoursSerializer
     */
    'days'?: number;
    /**
     * 時間数
     * @type {number}
     * @memberof ApiV1HolidaysAndHoursSerializer
     */
    'hours'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1PositionIndexResponse
 */
export interface ApiV1PositionIndexResponse {
    /**
     * 
     * @type {Array<ApiV1PositionResponseParams>}
     * @memberof ApiV1PositionIndexResponse
     */
    'positions': Array<ApiV1PositionResponseParams>;
    /**
     * 
     * @type {number}
     * @memberof ApiV1PositionIndexResponse
     */
    'total_count': number;
}
/**
 * 
 * @export
 * @interface ApiV1PositionRequest
 */
export interface ApiV1PositionRequest {
    /**
     * 作成対象事業所ID（必須）
     * @type {number}
     * @memberof ApiV1PositionRequest
     */
    'company_id': number;
    /**
     * 
     * @type {ApiV1PositionRequestParams}
     * @memberof ApiV1PositionRequest
     */
    'position': ApiV1PositionRequestParams;
}
/**
 * 
 * @export
 * @interface ApiV1PositionRequestParams
 */
export interface ApiV1PositionRequestParams {
    /**
     * 役職コード
     * @type {string}
     * @memberof ApiV1PositionRequestParams
     */
    'code'?: string;
    /**
     * 役職名称（必須）
     * @type {string}
     * @memberof ApiV1PositionRequestParams
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ApiV1PositionResponse
 */
export interface ApiV1PositionResponse {
    /**
     * 
     * @type {ApiV1PositionResponseParams}
     * @memberof ApiV1PositionResponse
     */
    'position': ApiV1PositionResponseParams;
}
/**
 * 
 * @export
 * @interface ApiV1PositionResponseParams
 */
export interface ApiV1PositionResponseParams {
    /**
     * 役職ID
     * @type {number}
     * @memberof ApiV1PositionResponseParams
     */
    'id': number;
    /**
     * 役職コード
     * @type {string}
     * @memberof ApiV1PositionResponseParams
     */
    'code'?: string | null;
    /**
     * 役職名称
     * @type {string}
     * @memberof ApiV1PositionResponseParams
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ApiV1SalariesEmployeePayrollStatementSerializer
 */
export interface ApiV1SalariesEmployeePayrollStatementSerializer {
    /**
     * 給与明細ID
     * @type {number}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'id'?: number;
    /**
     * 事業所ID
     * @type {number}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'company_id'?: number;
    /**
     * 従業員ID
     * @type {number}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'employee_id'?: number;
    /**
     * 従業員の姓名
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'employee_name'?: string;
    /**
     * 従業員の表示名
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'employee_display_name'?: string;
    /**
     * 従業員番号
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'employee_num'?: string | null;
    /**
     * 支払日
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'pay_date'?: string;
    /**
     * 給与計算開始日（固定給）
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'start_date'?: string;
    /**
     * 給与計算締日（固定給）
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'closing_date'?: string;
    /**
     * 給与計算開始日（変動給） 残業手当、遅刻早退・欠勤などの計算に使われる期間
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'variable_pay_start_date'?: string;
    /**
     * 給与計算締日（変動給）
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'variable_pay_closing_date'?: string;
    /**
     * 給与明細が確定されているかどうか
     * @type {boolean}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'fixed'?: boolean;
    /**
     * 計算状況ステータス calculating: 計算中, calculated: 計算完了, overwritten: 直接編集, imported: インポート, error: エラー
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'calc_status'?: string;
    /**
     * 計算状況ステータスの更新日
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'calculated_at'?: string | null;
    /**
     * 給与形態 monthly: 月給, daily: 日給, hourly: 時給, (空文字列): 計算中
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'pay_calc_type'?: ApiV1SalariesEmployeePayrollStatementSerializerPayCalcTypeEnum;
    /**
     * 基本給
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'basic_pay_amount'?: string | null;
    /**
     * 労働日数
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'work_days'?: string | null;
    /**
     * 労働時間のうち、所定労働時間に該当するもの
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'normal_work_time'?: string | null;
    /**
     * 所定労働出勤日数
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'normal_work_days'?: string | null;
    /**
     * 有給休暇時間数
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'work_mins_by_paid_holiday'?: string | null;
    /**
     * 有給日数
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'num_paid_holidays'?: string | null;
    /**
     * 役員かどうか
     * @type {boolean}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'is_board_member'?: boolean;
    /**
     * 勤怠控除額合計
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'total_attendance_deduction_amount'?: string | null;
    /**
     * 支給手当額合計
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'total_allowance_amount'?: string | null;
    /**
     * 控除額合計
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'total_deduction_amount'?: string | null;
    /**
     * 差引支給額(手取り額)
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'net_payment_amount'?: string | null;
    /**
     * 総支給額(額面)
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'gross_payment_amount'?: string | null;
    /**
     * 平日と休日の合計労働日数（日給用）
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'total_worked_days_count'?: string | null;
    /**
     * 課税対象支給額
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'total_taxable_payment_amount'?: string | null;
    /**
     * 総経費精算額
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'total_expense_amount'?: string | null;
    /**
     * 総振込額
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'total_transfer_amount'?: string | null;
    /**
     * 課税支給累計額
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'total_annual_payment_amount'?: string | null;
    /**
     * 支給項目（基本給、残業代、通勤手当等）
     * @type {Array<ApiV1EmployeePayrollStatementsEmployeePayrollStatementItemSerializer>}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'payments'?: Array<ApiV1EmployeePayrollStatementsEmployeePayrollStatementItemSerializer>;
    /**
     * 控除項目（所得税、住民税、社会保険料等）
     * @type {Array<ApiV1EmployeePayrollStatementsEmployeePayrollStatementItemSerializer>}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'deductions'?: Array<ApiV1EmployeePayrollStatementsEmployeePayrollStatementItemSerializer>;
    /**
     * 勤怠控除項目（遅刻早退控除、欠勤控除等）
     * @type {Array<ApiV1EmployeePayrollStatementsEmployeeAttendanceItemSerializer>}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'attendances'?: Array<ApiV1EmployeePayrollStatementsEmployeeAttendanceItemSerializer>;
    /**
     * 時間外労働項目(法定内残業、時間外労働、休日労働、深夜労働等)
     * @type {Array<ApiV1EmployeePayrollStatementsEmployeeOvertimePayItemSerializer>}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'overtime_pays'?: Array<ApiV1EmployeePayrollStatementsEmployeeOvertimePayItemSerializer> | null;
    /**
     * 備考
     * @type {string}
     * @memberof ApiV1SalariesEmployeePayrollStatementSerializer
     */
    'remark'?: string | null;
}

/**
    * @export
    * @enum {string}
    */
export enum ApiV1SalariesEmployeePayrollStatementSerializerPayCalcTypeEnum {
    Monthly = 'monthly',
    Daily = 'daily',
    Hourly = 'hourly',
    Empty = ''
}

/**
 * 
 * @export
 * @interface ApiV1SalariesEmployeePayrollStatementsControllerIndexResponse
 */
export interface ApiV1SalariesEmployeePayrollStatementsControllerIndexResponse {
    /**
     * 
     * @type {Array<ApiV1SalariesEmployeePayrollStatementSerializer>}
     * @memberof ApiV1SalariesEmployeePayrollStatementsControllerIndexResponse
     */
    'employee_payroll_statements'?: Array<ApiV1SalariesEmployeePayrollStatementSerializer>;
}
/**
 * 
 * @export
 * @interface ApiV1SalariesEmployeePayrollStatementsControllerShowResponse
 */
export interface ApiV1SalariesEmployeePayrollStatementsControllerShowResponse {
    /**
     * 
     * @type {ApiV1SalariesEmployeePayrollStatementSerializer}
     * @memberof ApiV1SalariesEmployeePayrollStatementsControllerShowResponse
     */
    'employee_payroll_statement'?: ApiV1SalariesEmployeePayrollStatementSerializer;
}
/**
 * 
 * @export
 * @interface ApiV1UsersCompanySerializer
 */
export interface ApiV1UsersCompanySerializer {
    /**
     * 事業所ID
     * @type {number}
     * @memberof ApiV1UsersCompanySerializer
     */
    'id'?: number;
    /**
     * 事業所名
     * @type {string}
     * @memberof ApiV1UsersCompanySerializer
     */
    'name'?: string;
    /**
     * 事業所におけるロール。 - `company_admin`: 管理者ユーザ - `self_only`: 一般ユーザ
     * @type {string}
     * @memberof ApiV1UsersCompanySerializer
     */
    'role'?: ApiV1UsersCompanySerializerRoleEnum;
    /**
     * 事業所番号(半角数字10桁)
     * @type {string}
     * @memberof ApiV1UsersCompanySerializer
     */
    'external_cid'?: string;
    /**
     * 事業所に所属する従業員としての従業員ID、従業員情報が未登録の場合はnullになります。
     * @type {number}
     * @memberof ApiV1UsersCompanySerializer
     */
    'employee_id'?: number | null;
    /**
     * 事業所に所属する従業員の表示名
     * @type {string}
     * @memberof ApiV1UsersCompanySerializer
     */
    'display_name'?: string | null;
}

/**
    * @export
    * @enum {string}
    */
export enum ApiV1UsersCompanySerializerRoleEnum {
    CompanyAdmin = 'company_admin',
    SelfOnly = 'self_only'
}

/**
 * 
 * @export
 * @interface ApiV1UsersMeSerializer
 */
export interface ApiV1UsersMeSerializer {
    /**
     * ユーザID
     * @type {number}
     * @memberof ApiV1UsersMeSerializer
     */
    'id'?: number;
    /**
     * ユーザが属する事業所の一覧
     * @type {Array<ApiV1UsersCompanySerializer>}
     * @memberof ApiV1UsersMeSerializer
     */
    'companies'?: Array<ApiV1UsersCompanySerializer>;
}
/**
 * 
 * @export
 * @interface ErrorErrors
 */
export interface ErrorErrors {
    /**
     * 
     * @type {string}
     * @memberof ErrorErrors
     */
    'type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ErrorErrors
     */
    'messages'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ForbiddenError
 */
export interface ForbiddenError {
    /**
     * 
     * @type {number}
     * @memberof ForbiddenError
     */
    'status_code'?: number;
    /**
     * 
     * @type {Array<ForbiddenErrorErrors>}
     * @memberof ForbiddenError
     */
    'errors'?: Array<ForbiddenErrorErrors>;
}
/**
 * 
 * @export
 * @interface ForbiddenErrorErrors
 */
export interface ForbiddenErrorErrors {
    /**
     * 
     * @type {string}
     * @memberof ForbiddenErrorErrors
     */
    'type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ForbiddenErrorErrors
     */
    'messages'?: Array<string>;
}
/**
 * 
 * @export
 * @interface InternalServerError
 */
export interface InternalServerError {
    /**
     * 
     * @type {number}
     * @memberof InternalServerError
     */
    'status_code'?: number;
    /**
     * 
     * @type {Array<InternalServerErrorErrors>}
     * @memberof InternalServerError
     */
    'errors'?: Array<InternalServerErrorErrors>;
}
/**
 * 
 * @export
 * @interface InternalServerErrorErrors
 */
export interface InternalServerErrorErrors {
    /**
     * 
     * @type {string}
     * @memberof InternalServerErrorErrors
     */
    'type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InternalServerErrorErrors
     */
    'messages'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'status_code'?: number;
    /**
     * 
     * @type {Array<ErrorErrors>}
     * @memberof ModelError
     */
    'errors'?: Array<ErrorErrors>;
}
/**
 * 
 * @export
 * @interface NotfoundError
 */
export interface NotfoundError {
    /**
     * 
     * @type {number}
     * @memberof NotfoundError
     */
    'status_code'?: number;
    /**
     * 
     * @type {Array<NotfoundErrorErrors>}
     * @memberof NotfoundError
     */
    'errors'?: Array<NotfoundErrorErrors>;
}
/**
 * 
 * @export
 * @interface NotfoundErrorErrors
 */
export interface NotfoundErrorErrors {
    /**
     * 
     * @type {string}
     * @memberof NotfoundErrorErrors
     */
    'type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NotfoundErrorErrors
     */
    'messages'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UnauthorizedError
 */
export interface UnauthorizedError {
    /**
     * 
     * @type {string}
     * @memberof UnauthorizedError
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnauthorizedError
     */
    'messages'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  指定した従業員の扶養親族情報を更新します。 idがない場合は新規作成、destroyがtrueの場合は削除になります。
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesDependentRulesControllerBulkUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateEmployeeDependentRules: async (employeeId: number, body?: ApiV1EmployeesDependentRulesControllerBulkUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('bulkUpdateEmployeeDependentRules', 'employeeId', employeeId)
            const localVarPath = `/api/v1/employees/{employee_id}/dependent_rules/bulk_update`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  従業員を新規作成します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 作成 
         * @param {ApiV1EmployeesControllerCreateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployee: async (body?: ApiV1EmployeesControllerCreateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員の打刻情報を登録します。 休憩開始の連続や退勤のみなど、整合性の取れていない打刻は登録できません。 退勤の打刻は、すでに登録されている退勤打刻よりも後の時刻であれば上書き登録することができます。 打刻可能種別の取得APIを呼ぶことで、その従業員がその時点で登録可能な打刻種別が取得できます。 打刻が日をまたぐ場合は、base_date(打刻日)に前日の日付を指定してください。 datetime(打刻日時)を指定できるのは管理者か事務担当者の権限を持ったユーザのみです。  ## 操作可能な打刻種別 - clock_in：出勤 - break_begin：休憩開始 - break_end：休憩終了 - clock_out：退勤
         * @summary 打刻情報の登録 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesTimeClocksControllerCreateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployeeTimeClock: async (employeeId: number, body?: ApiV1EmployeesTimeClocksControllerCreateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('createEmployeeTimeClock', 'employeeId', employeeId)
            const localVarPath = `/api/v1/employees/{employee_id}/time_clocks`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定したIDの従業員を削除します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 削除 
         * @param {number} id Scope response to id
         * @param {number} companyId 事業所ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyEmployee: async (id: number, companyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyEmployee', 'id', id)
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('destroyEmployee', 'companyId', companyId)
            const localVarPath = `/api/v1/employees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員の勤怠情報を削除します。
         * @summary 削除 
         * @param {number} employeeId 従業員ID
         * @param {string} date 対象日(YYYY-MM-DD)(例:2018-08-01)
         * @param {number} companyId 事業所ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyEmployeeWorkRecord: async (employeeId: number, date: string, companyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('destroyEmployeeWorkRecord', 'employeeId', employeeId)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('destroyEmployeeWorkRecord', 'date', date)
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('destroyEmployeeWorkRecord', 'companyId', companyId)
            const localVarPath = `/api/v1/employees/{employee_id}/work_records/{date}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)))
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員ID、年月の賞与明細を返します。 指定した年月に支払いのある賞与明細が返されます。 - 管理者権限を持ったユーザのみ実行可能です。  # examples ``` {  \"employee_payroll_statement\": {    \"id\": 1,    \"company_id\": 1,    \"employee_id\": 1,    \"employee_name\": \"給与 太郎\",    \"employee_display_name\": \"給与 太郎\",    \"employee_num\": \"001\",    \"closing_date\": \"2018-03-31\",    \"pay_date\": \"2018-03-31\",    \"fixed\": true,    \"calc_status\": \"calculated\",    \"calculated_at\": \"2018-09-27T05:06:45.315Z\",    \"bonus_amount\": \"300000.0\",    \"total_allowance_amount\": \"0.0\",    \"total_deduction_amount\": \"23830.0\",    \"net_payment_amount\": \"268000.0\",    \"gross_payment_amount\": \"330000.0\",    \"total_taxable_payment_amount\": \"330000.0\",    \"allowances\": [{\"name\": \"地域手当\", \"amount\": \"30000.0\"}],    \"deductions\": [{\"name\": \"所得税\", \"amount\": \"46000.0\"}, {\"name\": \"健康保険料\", \"amount\": \"16000.0\"}],    \"remark\": \"備考\"  } } ```
         * @summary 取得 
         * @param {number} companyId 
         * @param {number} year 
         * @param {number} month 
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBonusesEmployeePayrollStatement: async (companyId: number, year: number, month: number, employeeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getBonusesEmployeePayrollStatement', 'companyId', companyId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getBonusesEmployeePayrollStatement', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getBonusesEmployeePayrollStatement', 'month', month)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getBonusesEmployeePayrollStatement', 'employeeId', employeeId)
            const localVarPath = `/api/v1/bonuses/employee_payroll_statements/{employee_id}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した事業所に所属する従業員の賞与明細をリストで返します。 指定した年月に支払いのある賞与明細が返されます。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 一覧の取得 
         * @param {number} companyId 
         * @param {number} year 
         * @param {number} month 
         * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
         * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBonusesEmployeePayrollStatements: async (companyId: number, year: number, month: number, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getBonusesEmployeePayrollStatements', 'companyId', companyId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getBonusesEmployeePayrollStatements', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getBonusesEmployeePayrollStatements', 'month', month)
            const localVarPath = `/api/v1/bonuses/employee_payroll_statements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した事業所に所属する従業員をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。 - 退職ユーザも含めて取得可能です。
         * @summary 一覧の取得 
         * @param {number} companyId 事業所ID
         * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
         * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyEmployees: async (companyId: number, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompanyEmployees', 'companyId', companyId)
            const localVarPath = `/api/v1/companies/{company_id}/employees`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定したIDの従業員を返します。 - 管理者権限を持ったユーザのみ実行可能です。 - 指定した対象年月に退職済みユーザは取得できません。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年月（年）
         * @param {number} month 対象年月（月）
         * @param {number} id Scope response to id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployee: async (companyId: number, year: number, month: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEmployee', 'companyId', companyId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getEmployee', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getEmployee', 'month', month)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEmployee', 'id', id)
            const localVarPath = `/api/v1/employees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員・日付の銀行口座情報を返します。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeBankAccountRule: async (companyId: number, year: number, month: number, employeeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEmployeeBankAccountRule', 'companyId', companyId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getEmployeeBankAccountRule', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getEmployeeBankAccountRule', 'month', month)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeeBankAccountRule', 'employeeId', employeeId)
            const localVarPath = `/api/v1/employees/{employee_id}/bank_account_rule`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員・日付の基本給情報を返します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeBasicPayRule: async (companyId: number, year: number, month: number, employeeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEmployeeBasicPayRule', 'companyId', companyId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getEmployeeBasicPayRule', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getEmployeeBasicPayRule', 'month', month)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeeBasicPayRule', 'employeeId', employeeId)
            const localVarPath = `/api/v1/employees/{employee_id}/basic_pay_rule`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員・日付の扶養親族情報を返します。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeDependentRules: async (companyId: number, year: number, month: number, employeeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEmployeeDependentRules', 'companyId', companyId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getEmployeeDependentRules', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getEmployeeDependentRules', 'month', month)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeeDependentRules', 'employeeId', employeeId)
            const localVarPath = `/api/v1/employees/{employee_id}/dependent_rules`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した事業所の指定日付時点における所属情報をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 一覧の取得 
         * @param {number} companyId 
         * @param {string} baseDate 指定日。指定日付時点における所属情報をリストで返します。(YYYY-MM-DD)(例:2018-07-31)
         * @param {boolean} [withNoPayrollCalculation] trueを指定すると給与計算対象外の従業員情報をレスポンスに含めます。
         * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
         * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeGroupMemberships: async (companyId: number, baseDate: string, withNoPayrollCalculation?: boolean, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEmployeeGroupMemberships', 'companyId', companyId)
            // verify required parameter 'baseDate' is not null or undefined
            assertParamExists('getEmployeeGroupMemberships', 'baseDate', baseDate)
            const localVarPath = `/api/v1/employee_group_memberships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (baseDate !== undefined) {
                localVarQueryParameter['base_date'] = (baseDate as any instanceof Date) ?
                    (baseDate as any).toISOString().substr(0,10) :
                    baseDate;
            }

            if (withNoPayrollCalculation !== undefined) {
                localVarQueryParameter['with_no_payroll_calculation'] = withNoPayrollCalculation;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員・日付の健康保険情報を返します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeHealthInsuranceRule: async (companyId: number, year: number, month: number, employeeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEmployeeHealthInsuranceRule', 'companyId', companyId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getEmployeeHealthInsuranceRule', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getEmployeeHealthInsuranceRule', 'month', month)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeeHealthInsuranceRule', 'employeeId', employeeId)
            const localVarPath = `/api/v1/employees/{employee_id}/health_insurance_rule`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員・日付の姓名などの情報を返します。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeProfileRule: async (companyId: number, year: number, month: number, employeeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEmployeeProfileRule', 'companyId', companyId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getEmployeeProfileRule', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getEmployeeProfileRule', 'month', month)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeeProfileRule', 'employeeId', employeeId)
            const localVarPath = `/api/v1/employees/{employee_id}/profile_rule`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員・指定した打刻の詳細情報を返します。 打刻情報の一覧取得APIにて取得した打刻IDを利用することができます。
         * @summary 打刻情報の詳細取得 
         * @param {number} companyId 事業所ID
         * @param {number} employeeId 従業員ID
         * @param {number} id 打刻ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeTimeClock: async (companyId: number, employeeId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEmployeeTimeClock', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeeTimeClock', 'employeeId', employeeId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEmployeeTimeClock', 'id', id)
            const localVarPath = `/api/v1/employees/{employee_id}/time_clocks/{id}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員・期間の打刻情報を返します。 デフォルトでは従業員の当月の打刻開始日から当日までの値が返ります。
         * @summary 打刻情報の一覧取得 
         * @param {number} companyId 事業所ID
         * @param {number} employeeId 従業員ID
         * @param {string} [fromDate] 取得する打刻期間の開始日(YYYY-MM-DD)(例:2018-08-01)(デフォルト: 当月の打刻開始日)
         * @param {string} [toDate] 取得する打刻期間の終了日(YYYY-MM-DD)(例:2018-08-31)(デフォルト: 当日)
         * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
         * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeTimeClocks: async (companyId: number, employeeId: number, fromDate?: string, toDate?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEmployeeTimeClocks', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeeTimeClocks', 'employeeId', employeeId)
            const localVarPath = `/api/v1/employees/{employee_id}/time_clocks`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (fromDate !== undefined) {
                localVarQueryParameter['from_date'] = (fromDate as any instanceof Date) ?
                    (fromDate as any).toISOString().substr(0,10) :
                    fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['to_date'] = (toDate as any instanceof Date) ?
                    (toDate as any).toISOString().substr(0,10) :
                    toDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員・日付の打刻可能種別と打刻基準日を返します。 例: すでに出勤した状態だと、休憩開始、退勤が配列で返ります。  ## 返却される打刻種別 - clock_in：出勤 - break_begin：休憩開始 - break_end：休憩終了 - clock_out：退勤 ## 返却される日付 - base_date：打刻基準日
         * @summary 打刻可能種別の取得 
         * @param {number} companyId 事業所ID
         * @param {number} employeeId 従業員ID
         * @param {string} [date] 対象日(YYYY-MM-DD)(例:2018-08-01)(デフォルト：当日)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeTimeClocksAvailableTypes: async (companyId: number, employeeId: number, date?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEmployeeTimeClocksAvailableTypes', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeeTimeClocksAvailableTypes', 'employeeId', employeeId)
            const localVarPath = `/api/v1/employees/{employee_id}/time_clocks/available_types`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substr(0,10) :
                    date;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員・日付の厚生年金保険情報を返します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeWelfarePensionInsuranceRule: async (companyId: number, year: number, month: number, employeeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEmployeeWelfarePensionInsuranceRule', 'companyId', companyId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getEmployeeWelfarePensionInsuranceRule', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getEmployeeWelfarePensionInsuranceRule', 'month', month)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeeWelfarePensionInsuranceRule', 'employeeId', employeeId)
            const localVarPath = `/api/v1/employees/{employee_id}/welfare_pension_insurance_rule`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員・日付の勤怠情報を返します。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} employeeId 従業員ID
         * @param {string} date 対象日(YYYY-MM-DD)(例:2018-08-01)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeWorkRecord: async (companyId: number, employeeId: number, date: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEmployeeWorkRecord', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeeWorkRecord', 'employeeId', employeeId)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getEmployeeWorkRecord', 'date', date)
            const localVarPath = `/api/v1/employees/{employee_id}/work_records/{date}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)))
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員、月の勤怠情報のサマリを返します。 work_recordsオプションにtrueを指定することで、明細となる日次の勤怠情報もあわせて返却します。
         * @summary 勤怠情報月次サマリの取得 
         * @param {number} companyId 事業所ID
         * @param {number} employeeId 従業員ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {boolean} [workRecords] サマリ情報に日次の勤怠情報を含める(true/false)(デフォルト: false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeWorkRecordSummary: async (companyId: number, employeeId: number, year: number, month: number, workRecords?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEmployeeWorkRecordSummary', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeeWorkRecordSummary', 'employeeId', employeeId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getEmployeeWorkRecordSummary', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getEmployeeWorkRecordSummary', 'month', month)
            const localVarPath = `/api/v1/employees/{employee_id}/work_record_summaries/{year}/{month}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (workRecords !== undefined) {
                localVarQueryParameter['work_records'] = workRecords;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した対象年月に事業所に所属する従業員をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。 - 指定した年月に退職済みユーザは取得できません。
         * @summary 一覧の取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年月（年）
         * @param {number} month 対象年月（月）
         * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
         * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployees: async (companyId: number, year: number, month: number, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEmployees', 'companyId', companyId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getEmployees', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getEmployees', 'month', month)
            const localVarPath = `/api/v1/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した事業所の指定日付時点における部門情報をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 部門情報の一覧取得 
         * @param {number} companyId 事業所ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups: async (companyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getGroups', 'companyId', companyId)
            const localVarPath = `/api/v1/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した事業所の指定日付時点における役職情報をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 役職情報の一覧取得 
         * @param {number} companyId 事業所ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositions: async (companyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPositions', 'companyId', companyId)
            const localVarPath = `/api/v1/positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員ID、年月の給与明細を返します。 指定した年月に支払いのある給与明細が返されます。 - 複数時給を設定している場合はpaymentsに内訳が返されます。 - 管理者権限を持ったユーザのみ実行可能です。  # examples ``` {  \"employee_payroll_statement\": {    \"id\": 1,    \"company_id\": 1,    \"employee_id\": 1,    \"employee_name\": \"給与 太郎\",    \"employee_display_name\": \"給与 太郎\",    \"employee_num\": \"001\",    \"pay_date\": \"2018-02-25\",    \"start_date\": \"2018-02-01\",    \"closing_date\": \"2018-02-28\",    \"variable_pay_start_date\": \"2018-01-01\",    \"variable_pay_closing_date\": \"2018-01-31\",    \"fixed\": true,    \"calc_status\": \"calculated\",    \"calculated_at\": \"2018-09-27T05:06:45.315Z\",    \"pay_calc_type\": \"monthly\",    \"basic_pay_amount\": \"300000.0\",    \"work_days\": \"21.0\",    \"normal_work_time\": \"8.0\",    \"normal_work_days\": \"21.0\",    \"work_mins_by_paid_holiday\": \"480.0\",    \"num_paid_holidays\": \"1.0\",    \"is_board_member\": true,    \"total_attendance_deduction_amount\": \"0.0\",    \"total_allowance_amount\": \"0.0\",    \"total_deduction_amount\": \"23830.0\",    \"net_payment_amount\": \"277170.0\",    \"gross_payment_amount\": \"301000.0\",    \"total_worked_days_count\": \"21.0\",    \"total_taxable_payment_amount\": \"301000.0\",    \"total_expense_amount\": \"0.0\",    \"total_transfer_amount\": \"277170.0\",    \"total_annual_payment_amount\": \"600000.0\",    \"payments\": [{ \"name\": \"基本給\", \"amount\": \"300000.0\"},{ \"name\": \"残業代\", \"amount\": \"1000.0\"}],    \"deductions\": [{\"name\": \"所得税\", \"amount\": \"7000.0\"}, {\"name\": \"健康保険料\", \"amount\": \"16830.0\"}],    \"attendances\": [{\"name\": \"遅刻・早退\", \"time\": \"0.0\", \"amount\": \"0.0\"}],    \"overtime_pays\": [{ \"name\": \"時間外労働\", \"time\": \"60.0\", \"amount\": \"1000.0\", \"code\": null }, { \"name\": \"カスタム固定残業代\", \"time\": null, \"amount\": \"10000.0\", \"code\": \"a001\" }],    \"remark\": \"備考\"  } } ```
         * @summary 取得 
         * @param {number} companyId 
         * @param {number} year 
         * @param {number} month 
         * @param {number} employeeId Scope response to employee_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalariesEmployeePayrollStatement: async (companyId: number, year: number, month: number, employeeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSalariesEmployeePayrollStatement', 'companyId', companyId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getSalariesEmployeePayrollStatement', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getSalariesEmployeePayrollStatement', 'month', month)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getSalariesEmployeePayrollStatement', 'employeeId', employeeId)
            const localVarPath = `/api/v1/salaries/employee_payroll_statements/{employee_id}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した事業所に所属する従業員の給与明細をリストで返します。 指定した年月に支払いのある給与明細が返されます。 - 複数時給を設定している場合はpaymentsに内訳が返されます。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 一覧の取得 
         * @param {number} companyId 
         * @param {number} year 
         * @param {number} month 
         * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
         * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalariesEmployeePayrollStatements: async (companyId: number, year: number, month: number, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSalariesEmployeePayrollStatements', 'companyId', companyId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getSalariesEmployeePayrollStatements', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getSalariesEmployeePayrollStatements', 'month', month)
            const localVarPath = `/api/v1/salaries/employee_payroll_statements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  このリクエストの認可セッションにおけるログインユーザの情報を返します。 freee人事労務では一人のログインユーザを複数の事業所に関連付けられるため、このユーザと関連のあるすべての事業所の情報をリストで返します。 他のAPIのパラメータとして `company_id` が求められる場合は、このAPIで取得した `company_id` を使用します。 給与計算対象外の従業員の `employee_id` は取得できません。
         * @summary 取得 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員の情報を更新します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 更新 
         * @param {number} id Scope response to id
         * @param {ApiV1EmployeesControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee: async (id: number, body?: ApiV1EmployeesControllerUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEmployee', 'id', id)
            const localVarPath = `/api/v1/employees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員の銀行口座1の情報を更新します。
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesBankAccountRulesControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeBankAccountRule: async (employeeId: number, body?: ApiV1EmployeesBankAccountRulesControllerUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateEmployeeBankAccountRule', 'employeeId', employeeId)
            const localVarPath = `/api/v1/employees/{employee_id}/bank_account_rule`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員の基本給情報を更新します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesBasicPayRulesControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeBasicPayRule: async (employeeId: number, body?: ApiV1EmployeesBasicPayRulesControllerUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateEmployeeBasicPayRule', 'employeeId', employeeId)
            const localVarPath = `/api/v1/employees/{employee_id}/basic_pay_rule`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員の健康保険情報を更新します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesHealthInsuranceRulesControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeHealthInsuranceRule: async (employeeId: number, body?: ApiV1EmployeesHealthInsuranceRulesControllerUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateEmployeeHealthInsuranceRule', 'employeeId', employeeId)
            const localVarPath = `/api/v1/employees/{employee_id}/health_insurance_rule`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員の姓名・住所などを更新します。
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesProfileRulesControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeProfileRule: async (employeeId: number, body?: ApiV1EmployeesProfileRulesControllerUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateEmployeeProfileRule', 'employeeId', employeeId)
            const localVarPath = `/api/v1/employees/{employee_id}/profile_rule`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員の厚生年金保険情報を更新します。
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeWelfarePensionInsuranceRule: async (employeeId: number, body?: ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateEmployeeWelfarePensionInsuranceRule', 'employeeId', employeeId)
            const localVarPath = `/api/v1/employees/{employee_id}/welfare_pension_insurance_rule`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員の勤怠情報を更新します。 ※振替出勤・振替休日の登録はAPIでは行うことができません。  # examples  出勤日について出退勤時刻および休憩時間を更新する場合は以下のようなパラメータをリクエストします。  ``` {   \"work_record\": {     \"company_id\": 1,     \"break_records\": [       {         \"clock_in_at\": \"2017-05-25 12:00:00\",         \"clock_out_at\": \"2017-05-25 13:00:00\"       }     ],     \"clock_in_at\": \"2017-05-25 09:10:00\",     \"clock_out_at\": \"2017-05-25 18:20:00\"   } } ```  勤務パターンや既定の所定労働時間を変更する場合は use_default_work_pattern に false を指定するとともに、各設定を上書きするパラメータをリクエストします。  ``` {   \"work_record\": {     \"company_id\": 1,     \"break_records\": [       {         \"clock_in_at\": \"2017-05-25 12:00:00\",         \"clock_out_at\": \"2017-05-25 13:00:00\"       }     ],     \"clock_in_at\": \"2017-05-25 09:10:00\",     \"clock_out_at\": \"2017-05-25 18:20:00\",     \"day_pattern\": \"normal_day\",     \"normal_work_clock_in_at\": \"2017-05-25 11:00:00\",     \"normal_work_clock_out_at\": \"2017-12-20 20:00:00\",     \"normal_work_mins\": 0,     \"use_default_work_pattern\": false   } } ```  有給取得時の連携について 半休の場合は通常勤務のように勤務開始・終了時間を指定しつつ、加えて以下の２つの要素を指定することで API での勤怠をつけることができます。     - paid_holiday (半休の場合は 0.5 とします)     - normal_work_mins_by_paid_holiday (半休により計上される所定労働時間を分で指定します)  ``` {   \"work_record\": {     \"company_id\": 1,     \"break_records\": [       {         \"clock_in_at\": \"2017-05-25 12:00:00\",         \"clock_out_at\": \"2017-05-25 13:00:00\"       }     ],     \"clock_in_at\": \"2017-05-25 09:10:00\",     \"clock_out_at\": \"2017-05-25 18:20:00\",     \"paid_holiday\": 0.5,     \"normal_work_mins_by_paid_holiday\": 240   } } ```  欠勤を付ける場合は company_idとis_absence 以外のパラメータは必要ありません。  ``` {   \"work_record\": {     \"company_id\": 1,     \"is_absence\": true   } } ```
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {string} date 対象日(YYYY-MM-DD)(例:2018-08-01)
         * @param {ApiV1EmployeesWorkRecordsControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeWorkRecord: async (employeeId: number, date: string, body?: ApiV1EmployeesWorkRecordsControllerUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateEmployeeWorkRecord', 'employeeId', employeeId)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('updateEmployeeWorkRecord', 'date', date)
            const localVarPath = `/api/v1/employees/{employee_id}/work_records/{date}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)))
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  指定した従業員、月の勤怠情報のサマリを更新します。勤怠データが存在しない場合は新規作成、既に存在する場合は上書き更新されます。 ※日毎の勤怠の更新はこのAPIではできません。日毎の勤怠の操作には勤怠APIを使用して下さい。 ※管理者権限を持ったユーザのみ実行可能です。  ## 更新可能な項目 ※値が設定された項目のみ更新されます。新規作成で値が設定されなかった場合は自動的に0が設定されます。 - work_days：総勤務日数 - work_days_on_weekdays：所定労働日の勤務日数 - work_days_on_prescribed_holidays：所定休日の勤務日数 - work_days_on_legal_holidays：法定休日の勤務日数 - total_work_mins：労働時間（分） - total_normal_work_mins：所定労働時間（分） - total_excess_statutory_work_mins：給与計算に用いられる法定内残業時間（分） - total_holiday_work_mins：法定休日労働時間（分） - total_latenight_work_mins：深夜労働時間（分） - total_actual_excess_statutory_work_mins：実労働時間ベースの法定内残業時間（分） - total_overtime_work_mins：時間外労働時間（分） - num_absences：欠勤日数 - num_absences_for_deduction：控除対象の欠勤日数 - total_lateness_mins：遅刻時間（分） - total_lateness_mins_for_deduction：控除対象の遅刻時間（分） - total_early_leaving_mins：早退時間（分） - total_early_leaving_mins_for_deduction：控除対象の早退時間（分） - num_paid_holidays：有給取得日数 - total_shortage_work_mins：不足時間（分）（フレックスタイム制でのみ使用） - total_deemed_paid_excess_statutory_work_mins：支給対象の法定内残業時間（分）（裁量労働制でのみ使用） - total_deemed_paid_overtime_except_normal_work_mins：支給対象の時間外労働時間（分）（裁量労働制でのみ使用）  # examples  勤怠情報を更新する場合は以下のようなパラメータをリクエストします。  ``` {   \"work_days\": 20,   \"work_days_on_weekdays\": 20,   \"work_days_on_prescribed_holidays\": 0,   \"work_days_on_legal_holidays\": 0,   \"total_work_mins\": 9600,   \"total_normal_work_mins\": 9000,   \"total_excess_statutory_work_mins\": 600,   \"total_holiday_work_mins\": 0,   \"total_latenight_work_mins\": 0,   \"total_actual_excess_statutory_work_mins\": 0,   \"total_overtime_work_mins\": 600,   \"num_absences\": 0,   \"num_absences_for_deduction\": 0,   \"total_lateness_mins\": 60,   \"total_lateness_mins_for_deduction\": 60,   \"total_early_leaving_mins\": 60,   \"total_early_leaving_mins_for_deduction\": 60,   \"num_paid_holidays\": 2 } ```
         * @summary 勤怠情報月次サマリの更新 
         * @param {number} employeeId 従業員ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {ApiV1EmployeesWorkRecordSummaryControllerUpdateBody} [apiV1EmployeesWorkRecordSummaryControllerUpdateBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeWorkRecordSummary: async (employeeId: number, year: number, month: number, apiV1EmployeesWorkRecordSummaryControllerUpdateBody?: ApiV1EmployeesWorkRecordSummaryControllerUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateEmployeeWorkRecordSummary', 'employeeId', employeeId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('updateEmployeeWorkRecordSummary', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('updateEmployeeWorkRecordSummary', 'month', month)
            const localVarPath = `/api/v1/employees/{employee_id}/work_record_summaries/{year}/{month}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1EmployeesWorkRecordSummaryControllerUpdateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         *  指定した従業員の扶養親族情報を更新します。 idがない場合は新規作成、destroyがtrueの場合は削除になります。
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesDependentRulesControllerBulkUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkUpdateEmployeeDependentRules(employeeId: number, body?: ApiV1EmployeesDependentRulesControllerBulkUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesDependentRulesControllerBulkUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkUpdateEmployeeDependentRules(employeeId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  従業員を新規作成します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 作成 
         * @param {ApiV1EmployeesControllerCreateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmployee(body?: ApiV1EmployeesControllerCreateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesControllerCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmployee(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員の打刻情報を登録します。 休憩開始の連続や退勤のみなど、整合性の取れていない打刻は登録できません。 退勤の打刻は、すでに登録されている退勤打刻よりも後の時刻であれば上書き登録することができます。 打刻可能種別の取得APIを呼ぶことで、その従業員がその時点で登録可能な打刻種別が取得できます。 打刻が日をまたぐ場合は、base_date(打刻日)に前日の日付を指定してください。 datetime(打刻日時)を指定できるのは管理者か事務担当者の権限を持ったユーザのみです。  ## 操作可能な打刻種別 - clock_in：出勤 - break_begin：休憩開始 - break_end：休憩終了 - clock_out：退勤
         * @summary 打刻情報の登録 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesTimeClocksControllerCreateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmployeeTimeClock(employeeId: number, body?: ApiV1EmployeesTimeClocksControllerCreateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesTimeClocksControllerCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmployeeTimeClock(employeeId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定したIDの従業員を削除します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 削除 
         * @param {number} id Scope response to id
         * @param {number} companyId 事業所ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyEmployee(id: number, companyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyEmployee(id, companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員の勤怠情報を削除します。
         * @summary 削除 
         * @param {number} employeeId 従業員ID
         * @param {string} date 対象日(YYYY-MM-DD)(例:2018-08-01)
         * @param {number} companyId 事業所ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyEmployeeWorkRecord(employeeId: number, date: string, companyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyEmployeeWorkRecord(employeeId, date, companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員ID、年月の賞与明細を返します。 指定した年月に支払いのある賞与明細が返されます。 - 管理者権限を持ったユーザのみ実行可能です。  # examples ``` {  \"employee_payroll_statement\": {    \"id\": 1,    \"company_id\": 1,    \"employee_id\": 1,    \"employee_name\": \"給与 太郎\",    \"employee_display_name\": \"給与 太郎\",    \"employee_num\": \"001\",    \"closing_date\": \"2018-03-31\",    \"pay_date\": \"2018-03-31\",    \"fixed\": true,    \"calc_status\": \"calculated\",    \"calculated_at\": \"2018-09-27T05:06:45.315Z\",    \"bonus_amount\": \"300000.0\",    \"total_allowance_amount\": \"0.0\",    \"total_deduction_amount\": \"23830.0\",    \"net_payment_amount\": \"268000.0\",    \"gross_payment_amount\": \"330000.0\",    \"total_taxable_payment_amount\": \"330000.0\",    \"allowances\": [{\"name\": \"地域手当\", \"amount\": \"30000.0\"}],    \"deductions\": [{\"name\": \"所得税\", \"amount\": \"46000.0\"}, {\"name\": \"健康保険料\", \"amount\": \"16000.0\"}],    \"remark\": \"備考\"  } } ```
         * @summary 取得 
         * @param {number} companyId 
         * @param {number} year 
         * @param {number} month 
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBonusesEmployeePayrollStatement(companyId: number, year: number, month: number, employeeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1BonusesEmployeePayrollStatementsControllerShowResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBonusesEmployeePayrollStatement(companyId, year, month, employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した事業所に所属する従業員の賞与明細をリストで返します。 指定した年月に支払いのある賞与明細が返されます。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 一覧の取得 
         * @param {number} companyId 
         * @param {number} year 
         * @param {number} month 
         * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
         * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBonusesEmployeePayrollStatements(companyId: number, year: number, month: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1BonusesEmployeePayrollStatementsIndexSerializer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBonusesEmployeePayrollStatements(companyId, year, month, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した事業所に所属する従業員をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。 - 退職ユーザも含めて取得可能です。
         * @summary 一覧の取得 
         * @param {number} companyId 事業所ID
         * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
         * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyEmployees(companyId: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1CompaniesEmployeeSerializer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyEmployees(companyId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定したIDの従業員を返します。 - 管理者権限を持ったユーザのみ実行可能です。 - 指定した対象年月に退職済みユーザは取得できません。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年月（年）
         * @param {number} month 対象年月（月）
         * @param {number} id Scope response to id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployee(companyId: number, year: number, month: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesControllerShowResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployee(companyId, year, month, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員・日付の銀行口座情報を返します。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeBankAccountRule(companyId: number, year: number, month: number, employeeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesBankAccountRulesControllerShowResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeBankAccountRule(companyId, year, month, employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員・日付の基本給情報を返します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeBasicPayRule(companyId: number, year: number, month: number, employeeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesBasicPayRulesControllerShowResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeBasicPayRule(companyId, year, month, employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員・日付の扶養親族情報を返します。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeDependentRules(companyId: number, year: number, month: number, employeeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesDependentRulesControllerIndexResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeDependentRules(companyId, year, month, employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した事業所の指定日付時点における所属情報をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 一覧の取得 
         * @param {number} companyId 
         * @param {string} baseDate 指定日。指定日付時点における所属情報をリストで返します。(YYYY-MM-DD)(例:2018-07-31)
         * @param {boolean} [withNoPayrollCalculation] trueを指定すると給与計算対象外の従業員情報をレスポンスに含めます。
         * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
         * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeGroupMemberships(companyId: number, baseDate: string, withNoPayrollCalculation?: boolean, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeeGroupMembershipsIndexSerializer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeGroupMemberships(companyId, baseDate, withNoPayrollCalculation, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員・日付の健康保険情報を返します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeHealthInsuranceRule(companyId: number, year: number, month: number, employeeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesHealthInsuranceRulesControllerShowResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeHealthInsuranceRule(companyId, year, month, employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員・日付の姓名などの情報を返します。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeProfileRule(companyId: number, year: number, month: number, employeeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesProfileRulesControllerShowResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeProfileRule(companyId, year, month, employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員・指定した打刻の詳細情報を返します。 打刻情報の一覧取得APIにて取得した打刻IDを利用することができます。
         * @summary 打刻情報の詳細取得 
         * @param {number} companyId 事業所ID
         * @param {number} employeeId 従業員ID
         * @param {number} id 打刻ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeTimeClock(companyId: number, employeeId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesTimeClocksControllerShowResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeTimeClock(companyId, employeeId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員・期間の打刻情報を返します。 デフォルトでは従業員の当月の打刻開始日から当日までの値が返ります。
         * @summary 打刻情報の一覧取得 
         * @param {number} companyId 事業所ID
         * @param {number} employeeId 従業員ID
         * @param {string} [fromDate] 取得する打刻期間の開始日(YYYY-MM-DD)(例:2018-08-01)(デフォルト: 当月の打刻開始日)
         * @param {string} [toDate] 取得する打刻期間の終了日(YYYY-MM-DD)(例:2018-08-31)(デフォルト: 当日)
         * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
         * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeTimeClocks(companyId: number, employeeId: number, fromDate?: string, toDate?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1EmployeesTimeClockSerializer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeTimeClocks(companyId, employeeId, fromDate, toDate, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員・日付の打刻可能種別と打刻基準日を返します。 例: すでに出勤した状態だと、休憩開始、退勤が配列で返ります。  ## 返却される打刻種別 - clock_in：出勤 - break_begin：休憩開始 - break_end：休憩終了 - clock_out：退勤 ## 返却される日付 - base_date：打刻基準日
         * @summary 打刻可能種別の取得 
         * @param {number} companyId 事業所ID
         * @param {number} employeeId 従業員ID
         * @param {string} [date] 対象日(YYYY-MM-DD)(例:2018-08-01)(デフォルト：当日)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeTimeClocksAvailableTypes(companyId: number, employeeId: number, date?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesTimeClocksControllerAvailableTypesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeTimeClocksAvailableTypes(companyId, employeeId, date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員・日付の厚生年金保険情報を返します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeWelfarePensionInsuranceRule(companyId: number, year: number, month: number, employeeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesWelfarePensionInsuranceRulesControllerShowResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeWelfarePensionInsuranceRule(companyId, year, month, employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員・日付の勤怠情報を返します。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} employeeId 従業員ID
         * @param {string} date 対象日(YYYY-MM-DD)(例:2018-08-01)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeWorkRecord(companyId: number, employeeId: number, date: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesWorkRecordSerializer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeWorkRecord(companyId, employeeId, date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員、月の勤怠情報のサマリを返します。 work_recordsオプションにtrueを指定することで、明細となる日次の勤怠情報もあわせて返却します。
         * @summary 勤怠情報月次サマリの取得 
         * @param {number} companyId 事業所ID
         * @param {number} employeeId 従業員ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {boolean} [workRecords] サマリ情報に日次の勤怠情報を含める(true/false)(デフォルト: false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeWorkRecordSummary(companyId: number, employeeId: number, year: number, month: number, workRecords?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesWorkRecordSummarySerializer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeWorkRecordSummary(companyId, employeeId, year, month, workRecords, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した対象年月に事業所に所属する従業員をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。 - 指定した年月に退職済みユーザは取得できません。
         * @summary 一覧の取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年月（年）
         * @param {number} month 対象年月（月）
         * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
         * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployees(companyId: number, year: number, month: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesIndexSerializer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployees(companyId, year, month, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した事業所の指定日付時点における部門情報をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 部門情報の一覧取得 
         * @param {number} companyId 事業所ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroups(companyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1GroupsIndexResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroups(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した事業所の指定日付時点における役職情報をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 役職情報の一覧取得 
         * @param {number} companyId 事業所ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPositions(companyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PositionIndexResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPositions(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員ID、年月の給与明細を返します。 指定した年月に支払いのある給与明細が返されます。 - 複数時給を設定している場合はpaymentsに内訳が返されます。 - 管理者権限を持ったユーザのみ実行可能です。  # examples ``` {  \"employee_payroll_statement\": {    \"id\": 1,    \"company_id\": 1,    \"employee_id\": 1,    \"employee_name\": \"給与 太郎\",    \"employee_display_name\": \"給与 太郎\",    \"employee_num\": \"001\",    \"pay_date\": \"2018-02-25\",    \"start_date\": \"2018-02-01\",    \"closing_date\": \"2018-02-28\",    \"variable_pay_start_date\": \"2018-01-01\",    \"variable_pay_closing_date\": \"2018-01-31\",    \"fixed\": true,    \"calc_status\": \"calculated\",    \"calculated_at\": \"2018-09-27T05:06:45.315Z\",    \"pay_calc_type\": \"monthly\",    \"basic_pay_amount\": \"300000.0\",    \"work_days\": \"21.0\",    \"normal_work_time\": \"8.0\",    \"normal_work_days\": \"21.0\",    \"work_mins_by_paid_holiday\": \"480.0\",    \"num_paid_holidays\": \"1.0\",    \"is_board_member\": true,    \"total_attendance_deduction_amount\": \"0.0\",    \"total_allowance_amount\": \"0.0\",    \"total_deduction_amount\": \"23830.0\",    \"net_payment_amount\": \"277170.0\",    \"gross_payment_amount\": \"301000.0\",    \"total_worked_days_count\": \"21.0\",    \"total_taxable_payment_amount\": \"301000.0\",    \"total_expense_amount\": \"0.0\",    \"total_transfer_amount\": \"277170.0\",    \"total_annual_payment_amount\": \"600000.0\",    \"payments\": [{ \"name\": \"基本給\", \"amount\": \"300000.0\"},{ \"name\": \"残業代\", \"amount\": \"1000.0\"}],    \"deductions\": [{\"name\": \"所得税\", \"amount\": \"7000.0\"}, {\"name\": \"健康保険料\", \"amount\": \"16830.0\"}],    \"attendances\": [{\"name\": \"遅刻・早退\", \"time\": \"0.0\", \"amount\": \"0.0\"}],    \"overtime_pays\": [{ \"name\": \"時間外労働\", \"time\": \"60.0\", \"amount\": \"1000.0\", \"code\": null }, { \"name\": \"カスタム固定残業代\", \"time\": null, \"amount\": \"10000.0\", \"code\": \"a001\" }],    \"remark\": \"備考\"  } } ```
         * @summary 取得 
         * @param {number} companyId 
         * @param {number} year 
         * @param {number} month 
         * @param {number} employeeId Scope response to employee_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalariesEmployeePayrollStatement(companyId: number, year: number, month: number, employeeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SalariesEmployeePayrollStatementsControllerShowResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalariesEmployeePayrollStatement(companyId, year, month, employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した事業所に所属する従業員の給与明細をリストで返します。 指定した年月に支払いのある給与明細が返されます。 - 複数時給を設定している場合はpaymentsに内訳が返されます。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 一覧の取得 
         * @param {number} companyId 
         * @param {number} year 
         * @param {number} month 
         * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
         * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalariesEmployeePayrollStatements(companyId: number, year: number, month: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SalariesEmployeePayrollStatementsControllerIndexResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalariesEmployeePayrollStatements(companyId, year, month, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  このリクエストの認可セッションにおけるログインユーザの情報を返します。 freee人事労務では一人のログインユーザを複数の事業所に関連付けられるため、このユーザと関連のあるすべての事業所の情報をリストで返します。 他のAPIのパラメータとして `company_id` が求められる場合は、このAPIで取得した `company_id` を使用します。 給与計算対象外の従業員の `employee_id` は取得できません。
         * @summary 取得 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1UsersMeSerializer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員の情報を更新します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 更新 
         * @param {number} id Scope response to id
         * @param {ApiV1EmployeesControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployee(id: number, body?: ApiV1EmployeesControllerUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesControllerUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployee(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員の銀行口座1の情報を更新します。
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesBankAccountRulesControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployeeBankAccountRule(employeeId: number, body?: ApiV1EmployeesBankAccountRulesControllerUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesBankAccountRulesControllerUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployeeBankAccountRule(employeeId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員の基本給情報を更新します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesBasicPayRulesControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployeeBasicPayRule(employeeId: number, body?: ApiV1EmployeesBasicPayRulesControllerUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesBasicPayRulesControllerUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployeeBasicPayRule(employeeId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員の健康保険情報を更新します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesHealthInsuranceRulesControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployeeHealthInsuranceRule(employeeId: number, body?: ApiV1EmployeesHealthInsuranceRulesControllerUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesHealthInsuranceRulesControllerUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployeeHealthInsuranceRule(employeeId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員の姓名・住所などを更新します。
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesProfileRulesControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployeeProfileRule(employeeId: number, body?: ApiV1EmployeesProfileRulesControllerUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesProfileRulesControllerUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployeeProfileRule(employeeId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員の厚生年金保険情報を更新します。
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployeeWelfarePensionInsuranceRule(employeeId: number, body?: ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployeeWelfarePensionInsuranceRule(employeeId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員の勤怠情報を更新します。 ※振替出勤・振替休日の登録はAPIでは行うことができません。  # examples  出勤日について出退勤時刻および休憩時間を更新する場合は以下のようなパラメータをリクエストします。  ``` {   \"work_record\": {     \"company_id\": 1,     \"break_records\": [       {         \"clock_in_at\": \"2017-05-25 12:00:00\",         \"clock_out_at\": \"2017-05-25 13:00:00\"       }     ],     \"clock_in_at\": \"2017-05-25 09:10:00\",     \"clock_out_at\": \"2017-05-25 18:20:00\"   } } ```  勤務パターンや既定の所定労働時間を変更する場合は use_default_work_pattern に false を指定するとともに、各設定を上書きするパラメータをリクエストします。  ``` {   \"work_record\": {     \"company_id\": 1,     \"break_records\": [       {         \"clock_in_at\": \"2017-05-25 12:00:00\",         \"clock_out_at\": \"2017-05-25 13:00:00\"       }     ],     \"clock_in_at\": \"2017-05-25 09:10:00\",     \"clock_out_at\": \"2017-05-25 18:20:00\",     \"day_pattern\": \"normal_day\",     \"normal_work_clock_in_at\": \"2017-05-25 11:00:00\",     \"normal_work_clock_out_at\": \"2017-12-20 20:00:00\",     \"normal_work_mins\": 0,     \"use_default_work_pattern\": false   } } ```  有給取得時の連携について 半休の場合は通常勤務のように勤務開始・終了時間を指定しつつ、加えて以下の２つの要素を指定することで API での勤怠をつけることができます。     - paid_holiday (半休の場合は 0.5 とします)     - normal_work_mins_by_paid_holiday (半休により計上される所定労働時間を分で指定します)  ``` {   \"work_record\": {     \"company_id\": 1,     \"break_records\": [       {         \"clock_in_at\": \"2017-05-25 12:00:00\",         \"clock_out_at\": \"2017-05-25 13:00:00\"       }     ],     \"clock_in_at\": \"2017-05-25 09:10:00\",     \"clock_out_at\": \"2017-05-25 18:20:00\",     \"paid_holiday\": 0.5,     \"normal_work_mins_by_paid_holiday\": 240   } } ```  欠勤を付ける場合は company_idとis_absence 以外のパラメータは必要ありません。  ``` {   \"work_record\": {     \"company_id\": 1,     \"is_absence\": true   } } ```
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {string} date 対象日(YYYY-MM-DD)(例:2018-08-01)
         * @param {ApiV1EmployeesWorkRecordsControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployeeWorkRecord(employeeId: number, date: string, body?: ApiV1EmployeesWorkRecordsControllerUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesWorkRecordSerializer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployeeWorkRecord(employeeId, date, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  指定した従業員、月の勤怠情報のサマリを更新します。勤怠データが存在しない場合は新規作成、既に存在する場合は上書き更新されます。 ※日毎の勤怠の更新はこのAPIではできません。日毎の勤怠の操作には勤怠APIを使用して下さい。 ※管理者権限を持ったユーザのみ実行可能です。  ## 更新可能な項目 ※値が設定された項目のみ更新されます。新規作成で値が設定されなかった場合は自動的に0が設定されます。 - work_days：総勤務日数 - work_days_on_weekdays：所定労働日の勤務日数 - work_days_on_prescribed_holidays：所定休日の勤務日数 - work_days_on_legal_holidays：法定休日の勤務日数 - total_work_mins：労働時間（分） - total_normal_work_mins：所定労働時間（分） - total_excess_statutory_work_mins：給与計算に用いられる法定内残業時間（分） - total_holiday_work_mins：法定休日労働時間（分） - total_latenight_work_mins：深夜労働時間（分） - total_actual_excess_statutory_work_mins：実労働時間ベースの法定内残業時間（分） - total_overtime_work_mins：時間外労働時間（分） - num_absences：欠勤日数 - num_absences_for_deduction：控除対象の欠勤日数 - total_lateness_mins：遅刻時間（分） - total_lateness_mins_for_deduction：控除対象の遅刻時間（分） - total_early_leaving_mins：早退時間（分） - total_early_leaving_mins_for_deduction：控除対象の早退時間（分） - num_paid_holidays：有給取得日数 - total_shortage_work_mins：不足時間（分）（フレックスタイム制でのみ使用） - total_deemed_paid_excess_statutory_work_mins：支給対象の法定内残業時間（分）（裁量労働制でのみ使用） - total_deemed_paid_overtime_except_normal_work_mins：支給対象の時間外労働時間（分）（裁量労働制でのみ使用）  # examples  勤怠情報を更新する場合は以下のようなパラメータをリクエストします。  ``` {   \"work_days\": 20,   \"work_days_on_weekdays\": 20,   \"work_days_on_prescribed_holidays\": 0,   \"work_days_on_legal_holidays\": 0,   \"total_work_mins\": 9600,   \"total_normal_work_mins\": 9000,   \"total_excess_statutory_work_mins\": 600,   \"total_holiday_work_mins\": 0,   \"total_latenight_work_mins\": 0,   \"total_actual_excess_statutory_work_mins\": 0,   \"total_overtime_work_mins\": 600,   \"num_absences\": 0,   \"num_absences_for_deduction\": 0,   \"total_lateness_mins\": 60,   \"total_lateness_mins_for_deduction\": 60,   \"total_early_leaving_mins\": 60,   \"total_early_leaving_mins_for_deduction\": 60,   \"num_paid_holidays\": 2 } ```
         * @summary 勤怠情報月次サマリの更新 
         * @param {number} employeeId 従業員ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {ApiV1EmployeesWorkRecordSummaryControllerUpdateBody} [apiV1EmployeesWorkRecordSummaryControllerUpdateBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployeeWorkRecordSummary(employeeId: number, year: number, month: number, apiV1EmployeesWorkRecordSummaryControllerUpdateBody?: ApiV1EmployeesWorkRecordSummaryControllerUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1EmployeesWorkRecordSummarySerializer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployeeWorkRecordSummary(employeeId, year, month, apiV1EmployeesWorkRecordSummaryControllerUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         *  指定した従業員の扶養親族情報を更新します。 idがない場合は新規作成、destroyがtrueの場合は削除になります。
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesDependentRulesControllerBulkUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateEmployeeDependentRules(employeeId: number, body?: ApiV1EmployeesDependentRulesControllerBulkUpdateBody, options?: any): AxiosPromise<ApiV1EmployeesDependentRulesControllerBulkUpdateResponse> {
            return localVarFp.bulkUpdateEmployeeDependentRules(employeeId, body, options).then((request) => request(axios, basePath));
        },
        /**
         *  従業員を新規作成します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 作成 
         * @param {ApiV1EmployeesControllerCreateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployee(body?: ApiV1EmployeesControllerCreateBody, options?: any): AxiosPromise<ApiV1EmployeesControllerCreateResponse> {
            return localVarFp.createEmployee(body, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員の打刻情報を登録します。 休憩開始の連続や退勤のみなど、整合性の取れていない打刻は登録できません。 退勤の打刻は、すでに登録されている退勤打刻よりも後の時刻であれば上書き登録することができます。 打刻可能種別の取得APIを呼ぶことで、その従業員がその時点で登録可能な打刻種別が取得できます。 打刻が日をまたぐ場合は、base_date(打刻日)に前日の日付を指定してください。 datetime(打刻日時)を指定できるのは管理者か事務担当者の権限を持ったユーザのみです。  ## 操作可能な打刻種別 - clock_in：出勤 - break_begin：休憩開始 - break_end：休憩終了 - clock_out：退勤
         * @summary 打刻情報の登録 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesTimeClocksControllerCreateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployeeTimeClock(employeeId: number, body?: ApiV1EmployeesTimeClocksControllerCreateBody, options?: any): AxiosPromise<ApiV1EmployeesTimeClocksControllerCreateResponse> {
            return localVarFp.createEmployeeTimeClock(employeeId, body, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定したIDの従業員を削除します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 削除 
         * @param {number} id Scope response to id
         * @param {number} companyId 事業所ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyEmployee(id: number, companyId: number, options?: any): AxiosPromise<void> {
            return localVarFp.destroyEmployee(id, companyId, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員の勤怠情報を削除します。
         * @summary 削除 
         * @param {number} employeeId 従業員ID
         * @param {string} date 対象日(YYYY-MM-DD)(例:2018-08-01)
         * @param {number} companyId 事業所ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyEmployeeWorkRecord(employeeId: number, date: string, companyId: number, options?: any): AxiosPromise<void> {
            return localVarFp.destroyEmployeeWorkRecord(employeeId, date, companyId, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員ID、年月の賞与明細を返します。 指定した年月に支払いのある賞与明細が返されます。 - 管理者権限を持ったユーザのみ実行可能です。  # examples ``` {  \"employee_payroll_statement\": {    \"id\": 1,    \"company_id\": 1,    \"employee_id\": 1,    \"employee_name\": \"給与 太郎\",    \"employee_display_name\": \"給与 太郎\",    \"employee_num\": \"001\",    \"closing_date\": \"2018-03-31\",    \"pay_date\": \"2018-03-31\",    \"fixed\": true,    \"calc_status\": \"calculated\",    \"calculated_at\": \"2018-09-27T05:06:45.315Z\",    \"bonus_amount\": \"300000.0\",    \"total_allowance_amount\": \"0.0\",    \"total_deduction_amount\": \"23830.0\",    \"net_payment_amount\": \"268000.0\",    \"gross_payment_amount\": \"330000.0\",    \"total_taxable_payment_amount\": \"330000.0\",    \"allowances\": [{\"name\": \"地域手当\", \"amount\": \"30000.0\"}],    \"deductions\": [{\"name\": \"所得税\", \"amount\": \"46000.0\"}, {\"name\": \"健康保険料\", \"amount\": \"16000.0\"}],    \"remark\": \"備考\"  } } ```
         * @summary 取得 
         * @param {number} companyId 
         * @param {number} year 
         * @param {number} month 
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBonusesEmployeePayrollStatement(companyId: number, year: number, month: number, employeeId: number, options?: any): AxiosPromise<ApiV1BonusesEmployeePayrollStatementsControllerShowResponse> {
            return localVarFp.getBonusesEmployeePayrollStatement(companyId, year, month, employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した事業所に所属する従業員の賞与明細をリストで返します。 指定した年月に支払いのある賞与明細が返されます。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 一覧の取得 
         * @param {number} companyId 
         * @param {number} year 
         * @param {number} month 
         * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
         * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBonusesEmployeePayrollStatements(companyId: number, year: number, month: number, limit?: number, offset?: number, options?: any): AxiosPromise<ApiV1BonusesEmployeePayrollStatementsIndexSerializer> {
            return localVarFp.getBonusesEmployeePayrollStatements(companyId, year, month, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した事業所に所属する従業員をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。 - 退職ユーザも含めて取得可能です。
         * @summary 一覧の取得 
         * @param {number} companyId 事業所ID
         * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
         * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyEmployees(companyId: number, limit?: number, offset?: number, options?: any): AxiosPromise<Array<ApiV1CompaniesEmployeeSerializer>> {
            return localVarFp.getCompanyEmployees(companyId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定したIDの従業員を返します。 - 管理者権限を持ったユーザのみ実行可能です。 - 指定した対象年月に退職済みユーザは取得できません。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年月（年）
         * @param {number} month 対象年月（月）
         * @param {number} id Scope response to id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployee(companyId: number, year: number, month: number, id: number, options?: any): AxiosPromise<ApiV1EmployeesControllerShowResponse> {
            return localVarFp.getEmployee(companyId, year, month, id, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員・日付の銀行口座情報を返します。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeBankAccountRule(companyId: number, year: number, month: number, employeeId: number, options?: any): AxiosPromise<ApiV1EmployeesBankAccountRulesControllerShowResponse> {
            return localVarFp.getEmployeeBankAccountRule(companyId, year, month, employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員・日付の基本給情報を返します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeBasicPayRule(companyId: number, year: number, month: number, employeeId: number, options?: any): AxiosPromise<ApiV1EmployeesBasicPayRulesControllerShowResponse> {
            return localVarFp.getEmployeeBasicPayRule(companyId, year, month, employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員・日付の扶養親族情報を返します。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeDependentRules(companyId: number, year: number, month: number, employeeId: number, options?: any): AxiosPromise<ApiV1EmployeesDependentRulesControllerIndexResponse> {
            return localVarFp.getEmployeeDependentRules(companyId, year, month, employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した事業所の指定日付時点における所属情報をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 一覧の取得 
         * @param {number} companyId 
         * @param {string} baseDate 指定日。指定日付時点における所属情報をリストで返します。(YYYY-MM-DD)(例:2018-07-31)
         * @param {boolean} [withNoPayrollCalculation] trueを指定すると給与計算対象外の従業員情報をレスポンスに含めます。
         * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
         * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeGroupMemberships(companyId: number, baseDate: string, withNoPayrollCalculation?: boolean, limit?: number, offset?: number, options?: any): AxiosPromise<ApiV1EmployeeGroupMembershipsIndexSerializer> {
            return localVarFp.getEmployeeGroupMemberships(companyId, baseDate, withNoPayrollCalculation, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員・日付の健康保険情報を返します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeHealthInsuranceRule(companyId: number, year: number, month: number, employeeId: number, options?: any): AxiosPromise<ApiV1EmployeesHealthInsuranceRulesControllerShowResponse> {
            return localVarFp.getEmployeeHealthInsuranceRule(companyId, year, month, employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員・日付の姓名などの情報を返します。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeProfileRule(companyId: number, year: number, month: number, employeeId: number, options?: any): AxiosPromise<ApiV1EmployeesProfileRulesControllerShowResponse> {
            return localVarFp.getEmployeeProfileRule(companyId, year, month, employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員・指定した打刻の詳細情報を返します。 打刻情報の一覧取得APIにて取得した打刻IDを利用することができます。
         * @summary 打刻情報の詳細取得 
         * @param {number} companyId 事業所ID
         * @param {number} employeeId 従業員ID
         * @param {number} id 打刻ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeTimeClock(companyId: number, employeeId: number, id: number, options?: any): AxiosPromise<ApiV1EmployeesTimeClocksControllerShowResponse> {
            return localVarFp.getEmployeeTimeClock(companyId, employeeId, id, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員・期間の打刻情報を返します。 デフォルトでは従業員の当月の打刻開始日から当日までの値が返ります。
         * @summary 打刻情報の一覧取得 
         * @param {number} companyId 事業所ID
         * @param {number} employeeId 従業員ID
         * @param {string} [fromDate] 取得する打刻期間の開始日(YYYY-MM-DD)(例:2018-08-01)(デフォルト: 当月の打刻開始日)
         * @param {string} [toDate] 取得する打刻期間の終了日(YYYY-MM-DD)(例:2018-08-31)(デフォルト: 当日)
         * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
         * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeTimeClocks(companyId: number, employeeId: number, fromDate?: string, toDate?: string, limit?: number, offset?: number, options?: any): AxiosPromise<Array<ApiV1EmployeesTimeClockSerializer>> {
            return localVarFp.getEmployeeTimeClocks(companyId, employeeId, fromDate, toDate, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員・日付の打刻可能種別と打刻基準日を返します。 例: すでに出勤した状態だと、休憩開始、退勤が配列で返ります。  ## 返却される打刻種別 - clock_in：出勤 - break_begin：休憩開始 - break_end：休憩終了 - clock_out：退勤 ## 返却される日付 - base_date：打刻基準日
         * @summary 打刻可能種別の取得 
         * @param {number} companyId 事業所ID
         * @param {number} employeeId 従業員ID
         * @param {string} [date] 対象日(YYYY-MM-DD)(例:2018-08-01)(デフォルト：当日)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeTimeClocksAvailableTypes(companyId: number, employeeId: number, date?: string, options?: any): AxiosPromise<ApiV1EmployeesTimeClocksControllerAvailableTypesResponse> {
            return localVarFp.getEmployeeTimeClocksAvailableTypes(companyId, employeeId, date, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員・日付の厚生年金保険情報を返します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {number} employeeId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeWelfarePensionInsuranceRule(companyId: number, year: number, month: number, employeeId: number, options?: any): AxiosPromise<ApiV1EmployeesWelfarePensionInsuranceRulesControllerShowResponse> {
            return localVarFp.getEmployeeWelfarePensionInsuranceRule(companyId, year, month, employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員・日付の勤怠情報を返します。
         * @summary 取得 
         * @param {number} companyId 事業所ID
         * @param {number} employeeId 従業員ID
         * @param {string} date 対象日(YYYY-MM-DD)(例:2018-08-01)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeWorkRecord(companyId: number, employeeId: number, date: string, options?: any): AxiosPromise<ApiV1EmployeesWorkRecordSerializer> {
            return localVarFp.getEmployeeWorkRecord(companyId, employeeId, date, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員、月の勤怠情報のサマリを返します。 work_recordsオプションにtrueを指定することで、明細となる日次の勤怠情報もあわせて返却します。
         * @summary 勤怠情報月次サマリの取得 
         * @param {number} companyId 事業所ID
         * @param {number} employeeId 従業員ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {boolean} [workRecords] サマリ情報に日次の勤怠情報を含める(true/false)(デフォルト: false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeWorkRecordSummary(companyId: number, employeeId: number, year: number, month: number, workRecords?: boolean, options?: any): AxiosPromise<ApiV1EmployeesWorkRecordSummarySerializer> {
            return localVarFp.getEmployeeWorkRecordSummary(companyId, employeeId, year, month, workRecords, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した対象年月に事業所に所属する従業員をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。 - 指定した年月に退職済みユーザは取得できません。
         * @summary 一覧の取得 
         * @param {number} companyId 事業所ID
         * @param {number} year 対象年月（年）
         * @param {number} month 対象年月（月）
         * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
         * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployees(companyId: number, year: number, month: number, limit?: number, offset?: number, options?: any): AxiosPromise<ApiV1EmployeesIndexSerializer> {
            return localVarFp.getEmployees(companyId, year, month, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した事業所の指定日付時点における部門情報をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 部門情報の一覧取得 
         * @param {number} companyId 事業所ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups(companyId: number, options?: any): AxiosPromise<ApiV1GroupsIndexResponse> {
            return localVarFp.getGroups(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した事業所の指定日付時点における役職情報をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 役職情報の一覧取得 
         * @param {number} companyId 事業所ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositions(companyId: number, options?: any): AxiosPromise<ApiV1PositionIndexResponse> {
            return localVarFp.getPositions(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員ID、年月の給与明細を返します。 指定した年月に支払いのある給与明細が返されます。 - 複数時給を設定している場合はpaymentsに内訳が返されます。 - 管理者権限を持ったユーザのみ実行可能です。  # examples ``` {  \"employee_payroll_statement\": {    \"id\": 1,    \"company_id\": 1,    \"employee_id\": 1,    \"employee_name\": \"給与 太郎\",    \"employee_display_name\": \"給与 太郎\",    \"employee_num\": \"001\",    \"pay_date\": \"2018-02-25\",    \"start_date\": \"2018-02-01\",    \"closing_date\": \"2018-02-28\",    \"variable_pay_start_date\": \"2018-01-01\",    \"variable_pay_closing_date\": \"2018-01-31\",    \"fixed\": true,    \"calc_status\": \"calculated\",    \"calculated_at\": \"2018-09-27T05:06:45.315Z\",    \"pay_calc_type\": \"monthly\",    \"basic_pay_amount\": \"300000.0\",    \"work_days\": \"21.0\",    \"normal_work_time\": \"8.0\",    \"normal_work_days\": \"21.0\",    \"work_mins_by_paid_holiday\": \"480.0\",    \"num_paid_holidays\": \"1.0\",    \"is_board_member\": true,    \"total_attendance_deduction_amount\": \"0.0\",    \"total_allowance_amount\": \"0.0\",    \"total_deduction_amount\": \"23830.0\",    \"net_payment_amount\": \"277170.0\",    \"gross_payment_amount\": \"301000.0\",    \"total_worked_days_count\": \"21.0\",    \"total_taxable_payment_amount\": \"301000.0\",    \"total_expense_amount\": \"0.0\",    \"total_transfer_amount\": \"277170.0\",    \"total_annual_payment_amount\": \"600000.0\",    \"payments\": [{ \"name\": \"基本給\", \"amount\": \"300000.0\"},{ \"name\": \"残業代\", \"amount\": \"1000.0\"}],    \"deductions\": [{\"name\": \"所得税\", \"amount\": \"7000.0\"}, {\"name\": \"健康保険料\", \"amount\": \"16830.0\"}],    \"attendances\": [{\"name\": \"遅刻・早退\", \"time\": \"0.0\", \"amount\": \"0.0\"}],    \"overtime_pays\": [{ \"name\": \"時間外労働\", \"time\": \"60.0\", \"amount\": \"1000.0\", \"code\": null }, { \"name\": \"カスタム固定残業代\", \"time\": null, \"amount\": \"10000.0\", \"code\": \"a001\" }],    \"remark\": \"備考\"  } } ```
         * @summary 取得 
         * @param {number} companyId 
         * @param {number} year 
         * @param {number} month 
         * @param {number} employeeId Scope response to employee_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalariesEmployeePayrollStatement(companyId: number, year: number, month: number, employeeId: number, options?: any): AxiosPromise<ApiV1SalariesEmployeePayrollStatementsControllerShowResponse> {
            return localVarFp.getSalariesEmployeePayrollStatement(companyId, year, month, employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した事業所に所属する従業員の給与明細をリストで返します。 指定した年月に支払いのある給与明細が返されます。 - 複数時給を設定している場合はpaymentsに内訳が返されます。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 一覧の取得 
         * @param {number} companyId 
         * @param {number} year 
         * @param {number} month 
         * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
         * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalariesEmployeePayrollStatements(companyId: number, year: number, month: number, limit?: number, offset?: number, options?: any): AxiosPromise<ApiV1SalariesEmployeePayrollStatementsControllerIndexResponse> {
            return localVarFp.getSalariesEmployeePayrollStatements(companyId, year, month, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *  このリクエストの認可セッションにおけるログインユーザの情報を返します。 freee人事労務では一人のログインユーザを複数の事業所に関連付けられるため、このユーザと関連のあるすべての事業所の情報をリストで返します。 他のAPIのパラメータとして `company_id` が求められる場合は、このAPIで取得した `company_id` を使用します。 給与計算対象外の従業員の `employee_id` は取得できません。
         * @summary 取得 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersMe(options?: any): AxiosPromise<ApiV1UsersMeSerializer> {
            return localVarFp.getUsersMe(options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員の情報を更新します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 更新 
         * @param {number} id Scope response to id
         * @param {ApiV1EmployeesControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee(id: number, body?: ApiV1EmployeesControllerUpdateBody, options?: any): AxiosPromise<ApiV1EmployeesControllerUpdateResponse> {
            return localVarFp.updateEmployee(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員の銀行口座1の情報を更新します。
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesBankAccountRulesControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeBankAccountRule(employeeId: number, body?: ApiV1EmployeesBankAccountRulesControllerUpdateBody, options?: any): AxiosPromise<ApiV1EmployeesBankAccountRulesControllerUpdateResponse> {
            return localVarFp.updateEmployeeBankAccountRule(employeeId, body, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員の基本給情報を更新します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesBasicPayRulesControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeBasicPayRule(employeeId: number, body?: ApiV1EmployeesBasicPayRulesControllerUpdateBody, options?: any): AxiosPromise<ApiV1EmployeesBasicPayRulesControllerUpdateResponse> {
            return localVarFp.updateEmployeeBasicPayRule(employeeId, body, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員の健康保険情報を更新します。 - 管理者権限を持ったユーザのみ実行可能です。
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesHealthInsuranceRulesControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeHealthInsuranceRule(employeeId: number, body?: ApiV1EmployeesHealthInsuranceRulesControllerUpdateBody, options?: any): AxiosPromise<ApiV1EmployeesHealthInsuranceRulesControllerUpdateResponse> {
            return localVarFp.updateEmployeeHealthInsuranceRule(employeeId, body, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員の姓名・住所などを更新します。
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesProfileRulesControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeProfileRule(employeeId: number, body?: ApiV1EmployeesProfileRulesControllerUpdateBody, options?: any): AxiosPromise<ApiV1EmployeesProfileRulesControllerUpdateResponse> {
            return localVarFp.updateEmployeeProfileRule(employeeId, body, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員の厚生年金保険情報を更新します。
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeWelfarePensionInsuranceRule(employeeId: number, body?: ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody, options?: any): AxiosPromise<ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateResponse> {
            return localVarFp.updateEmployeeWelfarePensionInsuranceRule(employeeId, body, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員の勤怠情報を更新します。 ※振替出勤・振替休日の登録はAPIでは行うことができません。  # examples  出勤日について出退勤時刻および休憩時間を更新する場合は以下のようなパラメータをリクエストします。  ``` {   \"work_record\": {     \"company_id\": 1,     \"break_records\": [       {         \"clock_in_at\": \"2017-05-25 12:00:00\",         \"clock_out_at\": \"2017-05-25 13:00:00\"       }     ],     \"clock_in_at\": \"2017-05-25 09:10:00\",     \"clock_out_at\": \"2017-05-25 18:20:00\"   } } ```  勤務パターンや既定の所定労働時間を変更する場合は use_default_work_pattern に false を指定するとともに、各設定を上書きするパラメータをリクエストします。  ``` {   \"work_record\": {     \"company_id\": 1,     \"break_records\": [       {         \"clock_in_at\": \"2017-05-25 12:00:00\",         \"clock_out_at\": \"2017-05-25 13:00:00\"       }     ],     \"clock_in_at\": \"2017-05-25 09:10:00\",     \"clock_out_at\": \"2017-05-25 18:20:00\",     \"day_pattern\": \"normal_day\",     \"normal_work_clock_in_at\": \"2017-05-25 11:00:00\",     \"normal_work_clock_out_at\": \"2017-12-20 20:00:00\",     \"normal_work_mins\": 0,     \"use_default_work_pattern\": false   } } ```  有給取得時の連携について 半休の場合は通常勤務のように勤務開始・終了時間を指定しつつ、加えて以下の２つの要素を指定することで API での勤怠をつけることができます。     - paid_holiday (半休の場合は 0.5 とします)     - normal_work_mins_by_paid_holiday (半休により計上される所定労働時間を分で指定します)  ``` {   \"work_record\": {     \"company_id\": 1,     \"break_records\": [       {         \"clock_in_at\": \"2017-05-25 12:00:00\",         \"clock_out_at\": \"2017-05-25 13:00:00\"       }     ],     \"clock_in_at\": \"2017-05-25 09:10:00\",     \"clock_out_at\": \"2017-05-25 18:20:00\",     \"paid_holiday\": 0.5,     \"normal_work_mins_by_paid_holiday\": 240   } } ```  欠勤を付ける場合は company_idとis_absence 以外のパラメータは必要ありません。  ``` {   \"work_record\": {     \"company_id\": 1,     \"is_absence\": true   } } ```
         * @summary 更新 
         * @param {number} employeeId 従業員ID
         * @param {string} date 対象日(YYYY-MM-DD)(例:2018-08-01)
         * @param {ApiV1EmployeesWorkRecordsControllerUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeWorkRecord(employeeId: number, date: string, body?: ApiV1EmployeesWorkRecordsControllerUpdateBody, options?: any): AxiosPromise<ApiV1EmployeesWorkRecordSerializer> {
            return localVarFp.updateEmployeeWorkRecord(employeeId, date, body, options).then((request) => request(axios, basePath));
        },
        /**
         *  指定した従業員、月の勤怠情報のサマリを更新します。勤怠データが存在しない場合は新規作成、既に存在する場合は上書き更新されます。 ※日毎の勤怠の更新はこのAPIではできません。日毎の勤怠の操作には勤怠APIを使用して下さい。 ※管理者権限を持ったユーザのみ実行可能です。  ## 更新可能な項目 ※値が設定された項目のみ更新されます。新規作成で値が設定されなかった場合は自動的に0が設定されます。 - work_days：総勤務日数 - work_days_on_weekdays：所定労働日の勤務日数 - work_days_on_prescribed_holidays：所定休日の勤務日数 - work_days_on_legal_holidays：法定休日の勤務日数 - total_work_mins：労働時間（分） - total_normal_work_mins：所定労働時間（分） - total_excess_statutory_work_mins：給与計算に用いられる法定内残業時間（分） - total_holiday_work_mins：法定休日労働時間（分） - total_latenight_work_mins：深夜労働時間（分） - total_actual_excess_statutory_work_mins：実労働時間ベースの法定内残業時間（分） - total_overtime_work_mins：時間外労働時間（分） - num_absences：欠勤日数 - num_absences_for_deduction：控除対象の欠勤日数 - total_lateness_mins：遅刻時間（分） - total_lateness_mins_for_deduction：控除対象の遅刻時間（分） - total_early_leaving_mins：早退時間（分） - total_early_leaving_mins_for_deduction：控除対象の早退時間（分） - num_paid_holidays：有給取得日数 - total_shortage_work_mins：不足時間（分）（フレックスタイム制でのみ使用） - total_deemed_paid_excess_statutory_work_mins：支給対象の法定内残業時間（分）（裁量労働制でのみ使用） - total_deemed_paid_overtime_except_normal_work_mins：支給対象の時間外労働時間（分）（裁量労働制でのみ使用）  # examples  勤怠情報を更新する場合は以下のようなパラメータをリクエストします。  ``` {   \"work_days\": 20,   \"work_days_on_weekdays\": 20,   \"work_days_on_prescribed_holidays\": 0,   \"work_days_on_legal_holidays\": 0,   \"total_work_mins\": 9600,   \"total_normal_work_mins\": 9000,   \"total_excess_statutory_work_mins\": 600,   \"total_holiday_work_mins\": 0,   \"total_latenight_work_mins\": 0,   \"total_actual_excess_statutory_work_mins\": 0,   \"total_overtime_work_mins\": 600,   \"num_absences\": 0,   \"num_absences_for_deduction\": 0,   \"total_lateness_mins\": 60,   \"total_lateness_mins_for_deduction\": 60,   \"total_early_leaving_mins\": 60,   \"total_early_leaving_mins_for_deduction\": 60,   \"num_paid_holidays\": 2 } ```
         * @summary 勤怠情報月次サマリの更新 
         * @param {number} employeeId 従業員ID
         * @param {number} year 対象年
         * @param {number} month 対象月
         * @param {ApiV1EmployeesWorkRecordSummaryControllerUpdateBody} [apiV1EmployeesWorkRecordSummaryControllerUpdateBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeWorkRecordSummary(employeeId: number, year: number, month: number, apiV1EmployeesWorkRecordSummaryControllerUpdateBody?: ApiV1EmployeesWorkRecordSummaryControllerUpdateBody, options?: any): AxiosPromise<ApiV1EmployeesWorkRecordSummarySerializer> {
            return localVarFp.updateEmployeeWorkRecordSummary(employeeId, year, month, apiV1EmployeesWorkRecordSummaryControllerUpdateBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     *  指定した従業員の扶養親族情報を更新します。 idがない場合は新規作成、destroyがtrueの場合は削除になります。
     * @summary 更新 
     * @param {number} employeeId 従業員ID
     * @param {ApiV1EmployeesDependentRulesControllerBulkUpdateBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public bulkUpdateEmployeeDependentRules(employeeId: number, body?: ApiV1EmployeesDependentRulesControllerBulkUpdateBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bulkUpdateEmployeeDependentRules(employeeId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  従業員を新規作成します。 - 管理者権限を持ったユーザのみ実行可能です。
     * @summary 作成 
     * @param {ApiV1EmployeesControllerCreateBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createEmployee(body?: ApiV1EmployeesControllerCreateBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createEmployee(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員の打刻情報を登録します。 休憩開始の連続や退勤のみなど、整合性の取れていない打刻は登録できません。 退勤の打刻は、すでに登録されている退勤打刻よりも後の時刻であれば上書き登録することができます。 打刻可能種別の取得APIを呼ぶことで、その従業員がその時点で登録可能な打刻種別が取得できます。 打刻が日をまたぐ場合は、base_date(打刻日)に前日の日付を指定してください。 datetime(打刻日時)を指定できるのは管理者か事務担当者の権限を持ったユーザのみです。  ## 操作可能な打刻種別 - clock_in：出勤 - break_begin：休憩開始 - break_end：休憩終了 - clock_out：退勤
     * @summary 打刻情報の登録 
     * @param {number} employeeId 従業員ID
     * @param {ApiV1EmployeesTimeClocksControllerCreateBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createEmployeeTimeClock(employeeId: number, body?: ApiV1EmployeesTimeClocksControllerCreateBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createEmployeeTimeClock(employeeId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定したIDの従業員を削除します。 - 管理者権限を持ったユーザのみ実行可能です。
     * @summary 削除 
     * @param {number} id Scope response to id
     * @param {number} companyId 事業所ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public destroyEmployee(id: number, companyId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).destroyEmployee(id, companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員の勤怠情報を削除します。
     * @summary 削除 
     * @param {number} employeeId 従業員ID
     * @param {string} date 対象日(YYYY-MM-DD)(例:2018-08-01)
     * @param {number} companyId 事業所ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public destroyEmployeeWorkRecord(employeeId: number, date: string, companyId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).destroyEmployeeWorkRecord(employeeId, date, companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員ID、年月の賞与明細を返します。 指定した年月に支払いのある賞与明細が返されます。 - 管理者権限を持ったユーザのみ実行可能です。  # examples ``` {  \"employee_payroll_statement\": {    \"id\": 1,    \"company_id\": 1,    \"employee_id\": 1,    \"employee_name\": \"給与 太郎\",    \"employee_display_name\": \"給与 太郎\",    \"employee_num\": \"001\",    \"closing_date\": \"2018-03-31\",    \"pay_date\": \"2018-03-31\",    \"fixed\": true,    \"calc_status\": \"calculated\",    \"calculated_at\": \"2018-09-27T05:06:45.315Z\",    \"bonus_amount\": \"300000.0\",    \"total_allowance_amount\": \"0.0\",    \"total_deduction_amount\": \"23830.0\",    \"net_payment_amount\": \"268000.0\",    \"gross_payment_amount\": \"330000.0\",    \"total_taxable_payment_amount\": \"330000.0\",    \"allowances\": [{\"name\": \"地域手当\", \"amount\": \"30000.0\"}],    \"deductions\": [{\"name\": \"所得税\", \"amount\": \"46000.0\"}, {\"name\": \"健康保険料\", \"amount\": \"16000.0\"}],    \"remark\": \"備考\"  } } ```
     * @summary 取得 
     * @param {number} companyId 
     * @param {number} year 
     * @param {number} month 
     * @param {number} employeeId 従業員ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBonusesEmployeePayrollStatement(companyId: number, year: number, month: number, employeeId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBonusesEmployeePayrollStatement(companyId, year, month, employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した事業所に所属する従業員の賞与明細をリストで返します。 指定した年月に支払いのある賞与明細が返されます。 - 管理者権限を持ったユーザのみ実行可能です。
     * @summary 一覧の取得 
     * @param {number} companyId 
     * @param {number} year 
     * @param {number} month 
     * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
     * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBonusesEmployeePayrollStatements(companyId: number, year: number, month: number, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBonusesEmployeePayrollStatements(companyId, year, month, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した事業所に所属する従業員をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。 - 退職ユーザも含めて取得可能です。
     * @summary 一覧の取得 
     * @param {number} companyId 事業所ID
     * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
     * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompanyEmployees(companyId: number, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCompanyEmployees(companyId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定したIDの従業員を返します。 - 管理者権限を持ったユーザのみ実行可能です。 - 指定した対象年月に退職済みユーザは取得できません。
     * @summary 取得 
     * @param {number} companyId 事業所ID
     * @param {number} year 対象年月（年）
     * @param {number} month 対象年月（月）
     * @param {number} id Scope response to id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEmployee(companyId: number, year: number, month: number, id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEmployee(companyId, year, month, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員・日付の銀行口座情報を返します。
     * @summary 取得 
     * @param {number} companyId 事業所ID
     * @param {number} year 対象年
     * @param {number} month 対象月
     * @param {number} employeeId 従業員ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEmployeeBankAccountRule(companyId: number, year: number, month: number, employeeId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEmployeeBankAccountRule(companyId, year, month, employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員・日付の基本給情報を返します。 - 管理者権限を持ったユーザのみ実行可能です。
     * @summary 取得 
     * @param {number} companyId 事業所ID
     * @param {number} year 対象年
     * @param {number} month 対象月
     * @param {number} employeeId 従業員ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEmployeeBasicPayRule(companyId: number, year: number, month: number, employeeId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEmployeeBasicPayRule(companyId, year, month, employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員・日付の扶養親族情報を返します。
     * @summary 取得 
     * @param {number} companyId 事業所ID
     * @param {number} year 対象年
     * @param {number} month 対象月
     * @param {number} employeeId 従業員ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEmployeeDependentRules(companyId: number, year: number, month: number, employeeId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEmployeeDependentRules(companyId, year, month, employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した事業所の指定日付時点における所属情報をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。
     * @summary 一覧の取得 
     * @param {number} companyId 
     * @param {string} baseDate 指定日。指定日付時点における所属情報をリストで返します。(YYYY-MM-DD)(例:2018-07-31)
     * @param {boolean} [withNoPayrollCalculation] trueを指定すると給与計算対象外の従業員情報をレスポンスに含めます。
     * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
     * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEmployeeGroupMemberships(companyId: number, baseDate: string, withNoPayrollCalculation?: boolean, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEmployeeGroupMemberships(companyId, baseDate, withNoPayrollCalculation, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員・日付の健康保険情報を返します。 - 管理者権限を持ったユーザのみ実行可能です。
     * @summary 取得 
     * @param {number} companyId 事業所ID
     * @param {number} year 対象年
     * @param {number} month 対象月
     * @param {number} employeeId 従業員ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEmployeeHealthInsuranceRule(companyId: number, year: number, month: number, employeeId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEmployeeHealthInsuranceRule(companyId, year, month, employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員・日付の姓名などの情報を返します。
     * @summary 取得 
     * @param {number} companyId 事業所ID
     * @param {number} year 対象年
     * @param {number} month 対象月
     * @param {number} employeeId 従業員ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEmployeeProfileRule(companyId: number, year: number, month: number, employeeId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEmployeeProfileRule(companyId, year, month, employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員・指定した打刻の詳細情報を返します。 打刻情報の一覧取得APIにて取得した打刻IDを利用することができます。
     * @summary 打刻情報の詳細取得 
     * @param {number} companyId 事業所ID
     * @param {number} employeeId 従業員ID
     * @param {number} id 打刻ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEmployeeTimeClock(companyId: number, employeeId: number, id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEmployeeTimeClock(companyId, employeeId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員・期間の打刻情報を返します。 デフォルトでは従業員の当月の打刻開始日から当日までの値が返ります。
     * @summary 打刻情報の一覧取得 
     * @param {number} companyId 事業所ID
     * @param {number} employeeId 従業員ID
     * @param {string} [fromDate] 取得する打刻期間の開始日(YYYY-MM-DD)(例:2018-08-01)(デフォルト: 当月の打刻開始日)
     * @param {string} [toDate] 取得する打刻期間の終了日(YYYY-MM-DD)(例:2018-08-31)(デフォルト: 当日)
     * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
     * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEmployeeTimeClocks(companyId: number, employeeId: number, fromDate?: string, toDate?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEmployeeTimeClocks(companyId, employeeId, fromDate, toDate, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員・日付の打刻可能種別と打刻基準日を返します。 例: すでに出勤した状態だと、休憩開始、退勤が配列で返ります。  ## 返却される打刻種別 - clock_in：出勤 - break_begin：休憩開始 - break_end：休憩終了 - clock_out：退勤 ## 返却される日付 - base_date：打刻基準日
     * @summary 打刻可能種別の取得 
     * @param {number} companyId 事業所ID
     * @param {number} employeeId 従業員ID
     * @param {string} [date] 対象日(YYYY-MM-DD)(例:2018-08-01)(デフォルト：当日)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEmployeeTimeClocksAvailableTypes(companyId: number, employeeId: number, date?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEmployeeTimeClocksAvailableTypes(companyId, employeeId, date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員・日付の厚生年金保険情報を返します。 - 管理者権限を持ったユーザのみ実行可能です。
     * @summary 取得 
     * @param {number} companyId 事業所ID
     * @param {number} year 対象年
     * @param {number} month 対象月
     * @param {number} employeeId 従業員ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEmployeeWelfarePensionInsuranceRule(companyId: number, year: number, month: number, employeeId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEmployeeWelfarePensionInsuranceRule(companyId, year, month, employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員・日付の勤怠情報を返します。
     * @summary 取得 
     * @param {number} companyId 事業所ID
     * @param {number} employeeId 従業員ID
     * @param {string} date 対象日(YYYY-MM-DD)(例:2018-08-01)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEmployeeWorkRecord(companyId: number, employeeId: number, date: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEmployeeWorkRecord(companyId, employeeId, date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員、月の勤怠情報のサマリを返します。 work_recordsオプションにtrueを指定することで、明細となる日次の勤怠情報もあわせて返却します。
     * @summary 勤怠情報月次サマリの取得 
     * @param {number} companyId 事業所ID
     * @param {number} employeeId 従業員ID
     * @param {number} year 対象年
     * @param {number} month 対象月
     * @param {boolean} [workRecords] サマリ情報に日次の勤怠情報を含める(true/false)(デフォルト: false)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEmployeeWorkRecordSummary(companyId: number, employeeId: number, year: number, month: number, workRecords?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEmployeeWorkRecordSummary(companyId, employeeId, year, month, workRecords, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した対象年月に事業所に所属する従業員をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。 - 指定した年月に退職済みユーザは取得できません。
     * @summary 一覧の取得 
     * @param {number} companyId 事業所ID
     * @param {number} year 対象年月（年）
     * @param {number} month 対象年月（月）
     * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
     * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEmployees(companyId: number, year: number, month: number, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEmployees(companyId, year, month, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した事業所の指定日付時点における部門情報をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。
     * @summary 部門情報の一覧取得 
     * @param {number} companyId 事業所ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getGroups(companyId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getGroups(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した事業所の指定日付時点における役職情報をリストで返します。 - 管理者権限を持ったユーザのみ実行可能です。
     * @summary 役職情報の一覧取得 
     * @param {number} companyId 事業所ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPositions(companyId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPositions(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員ID、年月の給与明細を返します。 指定した年月に支払いのある給与明細が返されます。 - 複数時給を設定している場合はpaymentsに内訳が返されます。 - 管理者権限を持ったユーザのみ実行可能です。  # examples ``` {  \"employee_payroll_statement\": {    \"id\": 1,    \"company_id\": 1,    \"employee_id\": 1,    \"employee_name\": \"給与 太郎\",    \"employee_display_name\": \"給与 太郎\",    \"employee_num\": \"001\",    \"pay_date\": \"2018-02-25\",    \"start_date\": \"2018-02-01\",    \"closing_date\": \"2018-02-28\",    \"variable_pay_start_date\": \"2018-01-01\",    \"variable_pay_closing_date\": \"2018-01-31\",    \"fixed\": true,    \"calc_status\": \"calculated\",    \"calculated_at\": \"2018-09-27T05:06:45.315Z\",    \"pay_calc_type\": \"monthly\",    \"basic_pay_amount\": \"300000.0\",    \"work_days\": \"21.0\",    \"normal_work_time\": \"8.0\",    \"normal_work_days\": \"21.0\",    \"work_mins_by_paid_holiday\": \"480.0\",    \"num_paid_holidays\": \"1.0\",    \"is_board_member\": true,    \"total_attendance_deduction_amount\": \"0.0\",    \"total_allowance_amount\": \"0.0\",    \"total_deduction_amount\": \"23830.0\",    \"net_payment_amount\": \"277170.0\",    \"gross_payment_amount\": \"301000.0\",    \"total_worked_days_count\": \"21.0\",    \"total_taxable_payment_amount\": \"301000.0\",    \"total_expense_amount\": \"0.0\",    \"total_transfer_amount\": \"277170.0\",    \"total_annual_payment_amount\": \"600000.0\",    \"payments\": [{ \"name\": \"基本給\", \"amount\": \"300000.0\"},{ \"name\": \"残業代\", \"amount\": \"1000.0\"}],    \"deductions\": [{\"name\": \"所得税\", \"amount\": \"7000.0\"}, {\"name\": \"健康保険料\", \"amount\": \"16830.0\"}],    \"attendances\": [{\"name\": \"遅刻・早退\", \"time\": \"0.0\", \"amount\": \"0.0\"}],    \"overtime_pays\": [{ \"name\": \"時間外労働\", \"time\": \"60.0\", \"amount\": \"1000.0\", \"code\": null }, { \"name\": \"カスタム固定残業代\", \"time\": null, \"amount\": \"10000.0\", \"code\": \"a001\" }],    \"remark\": \"備考\"  } } ```
     * @summary 取得 
     * @param {number} companyId 
     * @param {number} year 
     * @param {number} month 
     * @param {number} employeeId Scope response to employee_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalariesEmployeePayrollStatement(companyId: number, year: number, month: number, employeeId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalariesEmployeePayrollStatement(companyId, year, month, employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した事業所に所属する従業員の給与明細をリストで返します。 指定した年月に支払いのある給与明細が返されます。 - 複数時給を設定している場合はpaymentsに内訳が返されます。 - 管理者権限を持ったユーザのみ実行可能です。
     * @summary 一覧の取得 
     * @param {number} companyId 
     * @param {number} year 
     * @param {number} month 
     * @param {number} [limit] 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)
     * @param {number} [offset] 取得レコードのオフセット (デフォルト: 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalariesEmployeePayrollStatements(companyId: number, year: number, month: number, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalariesEmployeePayrollStatements(companyId, year, month, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  このリクエストの認可セッションにおけるログインユーザの情報を返します。 freee人事労務では一人のログインユーザを複数の事業所に関連付けられるため、このユーザと関連のあるすべての事業所の情報をリストで返します。 他のAPIのパラメータとして `company_id` が求められる場合は、このAPIで取得した `company_id` を使用します。 給与計算対象外の従業員の `employee_id` は取得できません。
     * @summary 取得 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsersMe(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsersMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員の情報を更新します。 - 管理者権限を持ったユーザのみ実行可能です。
     * @summary 更新 
     * @param {number} id Scope response to id
     * @param {ApiV1EmployeesControllerUpdateBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateEmployee(id: number, body?: ApiV1EmployeesControllerUpdateBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateEmployee(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員の銀行口座1の情報を更新します。
     * @summary 更新 
     * @param {number} employeeId 従業員ID
     * @param {ApiV1EmployeesBankAccountRulesControllerUpdateBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateEmployeeBankAccountRule(employeeId: number, body?: ApiV1EmployeesBankAccountRulesControllerUpdateBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateEmployeeBankAccountRule(employeeId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員の基本給情報を更新します。 - 管理者権限を持ったユーザのみ実行可能です。
     * @summary 更新 
     * @param {number} employeeId 従業員ID
     * @param {ApiV1EmployeesBasicPayRulesControllerUpdateBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateEmployeeBasicPayRule(employeeId: number, body?: ApiV1EmployeesBasicPayRulesControllerUpdateBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateEmployeeBasicPayRule(employeeId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員の健康保険情報を更新します。 - 管理者権限を持ったユーザのみ実行可能です。
     * @summary 更新 
     * @param {number} employeeId 従業員ID
     * @param {ApiV1EmployeesHealthInsuranceRulesControllerUpdateBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateEmployeeHealthInsuranceRule(employeeId: number, body?: ApiV1EmployeesHealthInsuranceRulesControllerUpdateBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateEmployeeHealthInsuranceRule(employeeId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員の姓名・住所などを更新します。
     * @summary 更新 
     * @param {number} employeeId 従業員ID
     * @param {ApiV1EmployeesProfileRulesControllerUpdateBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateEmployeeProfileRule(employeeId: number, body?: ApiV1EmployeesProfileRulesControllerUpdateBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateEmployeeProfileRule(employeeId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員の厚生年金保険情報を更新します。
     * @summary 更新 
     * @param {number} employeeId 従業員ID
     * @param {ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateEmployeeWelfarePensionInsuranceRule(employeeId: number, body?: ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateEmployeeWelfarePensionInsuranceRule(employeeId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員の勤怠情報を更新します。 ※振替出勤・振替休日の登録はAPIでは行うことができません。  # examples  出勤日について出退勤時刻および休憩時間を更新する場合は以下のようなパラメータをリクエストします。  ``` {   \"work_record\": {     \"company_id\": 1,     \"break_records\": [       {         \"clock_in_at\": \"2017-05-25 12:00:00\",         \"clock_out_at\": \"2017-05-25 13:00:00\"       }     ],     \"clock_in_at\": \"2017-05-25 09:10:00\",     \"clock_out_at\": \"2017-05-25 18:20:00\"   } } ```  勤務パターンや既定の所定労働時間を変更する場合は use_default_work_pattern に false を指定するとともに、各設定を上書きするパラメータをリクエストします。  ``` {   \"work_record\": {     \"company_id\": 1,     \"break_records\": [       {         \"clock_in_at\": \"2017-05-25 12:00:00\",         \"clock_out_at\": \"2017-05-25 13:00:00\"       }     ],     \"clock_in_at\": \"2017-05-25 09:10:00\",     \"clock_out_at\": \"2017-05-25 18:20:00\",     \"day_pattern\": \"normal_day\",     \"normal_work_clock_in_at\": \"2017-05-25 11:00:00\",     \"normal_work_clock_out_at\": \"2017-12-20 20:00:00\",     \"normal_work_mins\": 0,     \"use_default_work_pattern\": false   } } ```  有給取得時の連携について 半休の場合は通常勤務のように勤務開始・終了時間を指定しつつ、加えて以下の２つの要素を指定することで API での勤怠をつけることができます。     - paid_holiday (半休の場合は 0.5 とします)     - normal_work_mins_by_paid_holiday (半休により計上される所定労働時間を分で指定します)  ``` {   \"work_record\": {     \"company_id\": 1,     \"break_records\": [       {         \"clock_in_at\": \"2017-05-25 12:00:00\",         \"clock_out_at\": \"2017-05-25 13:00:00\"       }     ],     \"clock_in_at\": \"2017-05-25 09:10:00\",     \"clock_out_at\": \"2017-05-25 18:20:00\",     \"paid_holiday\": 0.5,     \"normal_work_mins_by_paid_holiday\": 240   } } ```  欠勤を付ける場合は company_idとis_absence 以外のパラメータは必要ありません。  ``` {   \"work_record\": {     \"company_id\": 1,     \"is_absence\": true   } } ```
     * @summary 更新 
     * @param {number} employeeId 従業員ID
     * @param {string} date 対象日(YYYY-MM-DD)(例:2018-08-01)
     * @param {ApiV1EmployeesWorkRecordsControllerUpdateBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateEmployeeWorkRecord(employeeId: number, date: string, body?: ApiV1EmployeesWorkRecordsControllerUpdateBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateEmployeeWorkRecord(employeeId, date, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  指定した従業員、月の勤怠情報のサマリを更新します。勤怠データが存在しない場合は新規作成、既に存在する場合は上書き更新されます。 ※日毎の勤怠の更新はこのAPIではできません。日毎の勤怠の操作には勤怠APIを使用して下さい。 ※管理者権限を持ったユーザのみ実行可能です。  ## 更新可能な項目 ※値が設定された項目のみ更新されます。新規作成で値が設定されなかった場合は自動的に0が設定されます。 - work_days：総勤務日数 - work_days_on_weekdays：所定労働日の勤務日数 - work_days_on_prescribed_holidays：所定休日の勤務日数 - work_days_on_legal_holidays：法定休日の勤務日数 - total_work_mins：労働時間（分） - total_normal_work_mins：所定労働時間（分） - total_excess_statutory_work_mins：給与計算に用いられる法定内残業時間（分） - total_holiday_work_mins：法定休日労働時間（分） - total_latenight_work_mins：深夜労働時間（分） - total_actual_excess_statutory_work_mins：実労働時間ベースの法定内残業時間（分） - total_overtime_work_mins：時間外労働時間（分） - num_absences：欠勤日数 - num_absences_for_deduction：控除対象の欠勤日数 - total_lateness_mins：遅刻時間（分） - total_lateness_mins_for_deduction：控除対象の遅刻時間（分） - total_early_leaving_mins：早退時間（分） - total_early_leaving_mins_for_deduction：控除対象の早退時間（分） - num_paid_holidays：有給取得日数 - total_shortage_work_mins：不足時間（分）（フレックスタイム制でのみ使用） - total_deemed_paid_excess_statutory_work_mins：支給対象の法定内残業時間（分）（裁量労働制でのみ使用） - total_deemed_paid_overtime_except_normal_work_mins：支給対象の時間外労働時間（分）（裁量労働制でのみ使用）  # examples  勤怠情報を更新する場合は以下のようなパラメータをリクエストします。  ``` {   \"work_days\": 20,   \"work_days_on_weekdays\": 20,   \"work_days_on_prescribed_holidays\": 0,   \"work_days_on_legal_holidays\": 0,   \"total_work_mins\": 9600,   \"total_normal_work_mins\": 9000,   \"total_excess_statutory_work_mins\": 600,   \"total_holiday_work_mins\": 0,   \"total_latenight_work_mins\": 0,   \"total_actual_excess_statutory_work_mins\": 0,   \"total_overtime_work_mins\": 600,   \"num_absences\": 0,   \"num_absences_for_deduction\": 0,   \"total_lateness_mins\": 60,   \"total_lateness_mins_for_deduction\": 60,   \"total_early_leaving_mins\": 60,   \"total_early_leaving_mins_for_deduction\": 60,   \"num_paid_holidays\": 2 } ```
     * @summary 勤怠情報月次サマリの更新 
     * @param {number} employeeId 従業員ID
     * @param {number} year 対象年
     * @param {number} month 対象月
     * @param {ApiV1EmployeesWorkRecordSummaryControllerUpdateBody} [apiV1EmployeesWorkRecordSummaryControllerUpdateBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateEmployeeWorkRecordSummary(employeeId: number, year: number, month: number, apiV1EmployeesWorkRecordSummaryControllerUpdateBody?: ApiV1EmployeesWorkRecordSummaryControllerUpdateBody, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateEmployeeWorkRecordSummary(employeeId, year, month, apiV1EmployeesWorkRecordSummaryControllerUpdateBody, options).then((request) => request(this.axios, this.basePath));
    }
}


